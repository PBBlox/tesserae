variables:
  buildConfiguration: 'Release'
  repo: 'https://$(username):$(pat)@github.com/curiosity-ai/tesserae.git'
  msg: 'update_demo_$(build.buildId)'
  buildVersion: '$(Year:yyyy).$(build.buildId)'

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- checkout: self
  submodules: true
  persistCredentials: true

- task: UseDotNet@2
  displayName: 'Use .NET 5.0 sdk'
  inputs:
    packageType: sdk
    version: 5.0.103
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: NuGetToolInstaller@1

- task: CmdLine@2
  displayName: 'install h5 compiler'
  inputs:
    script: 'dotnet tool update --global h5-compiler'

- task: CmdLine@2
  displayName: 'restore project'
  inputs:
    script: 'dotnet restore $(Build.SourcesDirectory)\Tesserae\Tesserae.csproj'
    workingDirectory: '$(Build.SourcesDirectory)/Tesserae/'

- task: CmdLine@2
  displayName: 'restore tests project'
  inputs:
    script: 'dotnet restore $(Build.SourcesDirectory)\Tesserae.Tests\Tesserae.Tests.csproj'
    workingDirectory: '$(Build.SourcesDirectory)/Tesserae.Tests/'

- task: CmdLine@2
  displayName: 'git config'
  inputs:
    script: |
      git config --global credential.helper store
      git config --global user.email "$(EMAIL)"
      git config --global user.name "$(USER)"
      git config --global user.password  "$(PAT)"

- task: CmdLine@2
  displayName: 'update lineawesome'
  inputs:
    script: |
      cd $(Build.SourcesDirectory)/Build.ImportLineAwesome/
      mkdir FromGit
      cd FromGit
      git clone --depth=1 --branch=master  https://github.com/icons8/line-awesome/
      copy .\line-awesome\dist\line-awesome\fonts\*.eot   ..\..\Tesserae\h5\assets\fonts\
      copy .\line-awesome\dist\line-awesome\fonts\*.ttf   ..\..\Tesserae\h5\assets\fonts\
      copy .\line-awesome\dist\line-awesome\fonts\*.woff  ..\..\Tesserae\h5\assets\fonts\
      copy .\line-awesome\dist\line-awesome\fonts\*.woff2 ..\..\Tesserae\h5\assets\fonts\
      copy .\line-awesome\dist\line-awesome\css\line-awesome.min.css ..\..\Tesserae\h5\assets\css\line-awesome.css
      cd ..
      dotnet run
      rmdir /s .\FromGit\line-awesome /q
      cd ..
      git add .
      git commit -m "Updated line-awesome"
      git push origin HEAD:master

# This has to run after the git commit above, so the injected source-code stays out of the repository
- task: CmdLine@2
  displayName: 'update samples'
  inputs:
    script: |
      cd $(Build.SourcesDirectory)/Build.InjectSamplesCode/
      dotnet run

- task: CmdLine@2
  inputs:
    script: 'dotnet build $(Build.SourcesDirectory)\Tesserae\Tesserae.csproj  -c $(buildConfiguration) /p:Version=$(buildVersion)'
    workingDirectory: '$(Build.SourcesDirectory)/Tesserae/'

- task: CmdLine@2
  inputs:
    script: 'dotnet build $(Build.SourcesDirectory)\Tesserae.Tests\Tesserae.Tests.csproj  -c $(buildConfiguration) /p:Version=$(buildVersion)'
    workingDirectory: '$(Build.SourcesDirectory)/Tesserae.Tests/'

- task: PowerShell@2
  displayName: 'push tests to gh-pages'
  inputs:
    targetType: 'inline'
    script: |
      cd "$(Build.SourcesDirectory)/Tesserae.Tests/bin/Release/netstandard2.0/h5/"
      git init
      git config core.autocrlf true
      git config core.safecrlf false
      git config user.email "$(EMAIL)"
      git config user.name "$(USER)"
      git checkout -b gh-pages
      git add .
      git commit -m $(msg)
      git remote add origin $(repo)
      git push --set-upstream origin gh-pages --force
    errorActionPreference: 'continue'
    ignoreLASTEXITCODE: true


- task: CmdLine@2
  inputs:
    script: 'dir $(Build.SourcesDirectory)\Tesserae\bin\ /S'
- task: NuGetCommand@2
  displayName: 'push  Tesserae to nuget'
  inputs:
    command: 'push'
    packagesToPush: '**/*/Tesserae.$(buildVersion).nupkg' # The package name comes from the PackageID, not project name
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget-curiosity'
