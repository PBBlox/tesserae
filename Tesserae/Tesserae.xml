<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tesserae</name>
    </assembly>
    <members>
        <member name="M:Tesserae.UI.Var``1(``0,``0@)">
            <summary>
            Helper method to capture the current component inline on it's definition, as an out variable
            </summary>
            <typeparam name="T">Any component implementing <see cref="T:Tesserae.Components.IComponent"/></typeparam>
            <param name="component"></param>
            <param name="var">Capture variable</param>
            <returns>itself</returns>
        </member>
        <member name="M:Tesserae.UI.Id``1(``0,System.String)">
            <summary>
            Adds an ID to the element representing the component.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.UI.Raw(Retyped.dom.HTMLElement)">
            <summary>
            Creates a wrapper IComponent from an HTML element
            </summary>
            <param name="element">HTML element to be wrapped</param>
            <returns></returns>
        </member>
        <member name="P:Tesserae.Components.Button.Text">
            <summary>
            Gets or sets button text
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.Title">
            <summary>
            Gets or sets button title
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.Icon">
            <summary>
            Gets or sets button icon (icon class)
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsCompact">
            <summary>
            Gets or set whenever button is rendered in a compact form
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsLink">
            <summary>
            Gets or set whenever button is rendered like a link
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsPrimary">
            <summary>
            Gets or set whenever button is primary
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsSuccess">
            <summary>
            Gets or set whenever button is primary
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsDanger">
            <summary>
            Gets or set whenever button is danger
            </summary>
        </member>
        <member name="P:Tesserae.Components.Button.IsEnabled">
            <summary>
            Gets or sets whenever button is enabled
            </summary>
        </member>
        <member name="P:Tesserae.Components.Card.IsCompact">
            <summary>
            Gets or set whenever the card is rendered in a compact form
            </summary>
        </member>
        <member name="P:Tesserae.Components.CheckBox.Text">
            <summary>
            Gets or sets button text
            </summary>
        </member>
        <member name="P:Tesserae.Components.CheckBox.IsEnabled">
            <summary>
            Gets or sets whenever CheckBox is enabled
            </summary>
        </member>
        <member name="P:Tesserae.Components.CheckBox.IsChecked">
            <summary>
            Gets or sets whenever CheckBox is checked
            </summary>
        </member>
        <member name="P:Tesserae.Components.FileDropArea.Accepts">
            <summary>
            Gets or sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
            Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
            </summary>
        </member>
        <member name="M:Tesserae.Components.FileDropArea.SetAccepts(System.String)">
            <summary>
            Sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
            Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
            </summary>
            <param name="accepts"></param>
            <returns></returns>
        </member>
        <member name="P:Tesserae.Components.FileSelector.Accepts">
            <summary>
            Gets or sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
            Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
            </summary>
        </member>
        <member name="M:Tesserae.Components.FileSelector.SetAccepts(System.String)">
            <summary>
            Sets the type of files accepted by this selector. See https://www.w3schools.com/tags/att_input_accept.asp for more information.
            Valid values are a list of extensions, like ".txt|.doc|.docx", of media type, such as  "audio/*|video/*|image/*", or a combination of both
            </summary>
            <param name="accepts"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Grid.AlignItems(Tesserae.Components.ItemAlign)">
            <summary>
            Sets the align-items css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Grid.AlignContent(Tesserae.Components.ItemAlign)">
            <summary>
            Sets the align-items css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Grid.JustifyContent(Tesserae.Components.ItemJustify)">
            <summary>
            Sets the justify-content css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Grid.JustifyItems(Tesserae.Components.ItemJustify)">
            <summary>
            Sets the justify-content css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="T:Tesserae.Components.Layers">
            <summary>
            A Layer is a technical component that does not have specific Design guidance.
            
            Layers are used to render content outside of a DOM tree, at the end of the document.This allows content to escape traditional boundaries caused by "overflow: hidden" css rules and keeps it on the top without using z-index rules.This is useful for example in
            ContextualMenu and Tooltip scenarios, where the content should always overlay everything else.
            </summary>
        </member>
        <member name="P:Tesserae.Components.Nav.NavLink.Text">
            <summary>
            Gets or sets NavLink text
            </summary>
        </member>
        <member name="P:Tesserae.Components.Nav.NavLink.Icon">
            <summary>
            Gets or sets NavLink icon (icon class)
            </summary>
        </member>
        <member name="T:Tesserae.Components.Stack">
            <summary>
            A Stack is a container-type component that abstracts the implementation of a flexbox in order to define the layout of its children components.
            </summary>
        </member>
        <member name="M:Tesserae.Components.Stack.AlignItems(Tesserae.Components.ItemAlign)">
            <summary>
            Sets the align-items css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Stack.AlignContent(Tesserae.Components.ItemAlign)">
            <summary>
            Sets the align-items css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Stack.JustifyContent(Tesserae.Components.ItemJustify)">
            <summary>
            Sets the justify-content css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:Tesserae.Components.Stack.JustifyItems(Tesserae.Components.ItemJustify)">
            <summary>
            Sets the justify-content css property for this stack
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="P:Tesserae.Components.TextBlock.IsPrimary">
            <summary>
            Gets or set whenever text block color is primary
            </summary>
        </member>
        <member name="P:Tesserae.Components.TextBlock.IsSecondary">
            <summary>
            Gets or set whenever text block color is primary
            </summary>
        </member>
        <member name="P:Tesserae.Components.TextBlock.IsSuccess">
            <summary>
            Gets or set whenever text block color is success
            </summary>
        </member>
        <member name="P:Tesserae.Components.TextBlock.IsDanger">
            <summary>
            Gets or set whenever text block color is danger
            </summary>
        </member>
        <member name="P:Tesserae.Components.TextBlock.IsInvalid">
            <summary>
            Gets or set whenever text block color is invalid
            </summary>
        </member>
        <member name="P:Tesserae.Components.Toggle.Text">
            <summary>
            Gets or sets toggle text
            </summary>
        </member>
        <member name="P:Tesserae.Components.Toggle.IsEnabled">
            <summary>
            Gets or sets whenever Toggle is enabled
            </summary>
        </member>
        <member name="P:Tesserae.Components.Toggle.IsChecked">
            <summary>
            Gets or sets whenever Toggle is checked
            </summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.W``1(``0,Tesserae.UnitSize)">
            <summary>Width</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.H``1(``0,Tesserae.UnitSize)">
            <summary>Height</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.S``1(``0)">
            <summary>Stretch</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.WS``1(``0)">
            <summary>WidthStretch</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.HS``1(``0)">
            <summary>HeightStretch</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.ML``1(``0,Tesserae.UnitSize)">
            <summary>MarginLeft</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.MR``1(``0,Tesserae.UnitSize)">
            <summary>MarginRight</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.MT``1(``0,Tesserae.UnitSize)">
            <summary>MarginTop</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.MB``1(``0,Tesserae.UnitSize)">
            <summary>MarginBottom</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.PL``1(``0,Tesserae.UnitSize)">
            <summary>PaddingLeft</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.PR``1(``0,Tesserae.UnitSize)">
            <summary>PaddingRight</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.PT``1(``0,Tesserae.UnitSize)">
            <summary>PaddingTop</summary>
        </member>
        <member name="M:Tesserae.Components.IComponentExtensions.PB``1(``0,Tesserae.UnitSize)">
            <summary>PaddingBottom</summary>
        </member>
        <member name="P:Tesserae.Components.TaskExtensions.Completed">
            <summary>
            Bridge doesn't support Task.Completed, so we'll fill in something similar
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.FireAndForget(System.Threading.Tasks.Task)">
            <summary>
            Sometimes you want to start a Task and not await its results but there is an analyzer that presumes that code that creates Tasks and doesn't await them is incorrect
            (and, often, it is right) but sometimes you don't want to await and you don't want the analyzer telling you about it - in that case, use this extensions method
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.FireAndForget``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Sometimes you want to start a Task and not await its results but there is an analyzer that presumes that code that creates Tasks and doesn't await them is incorrect
            (and, often, it is right) but sometimes you don't want to await and you don't want the analyzer telling you about it - in that case, use this extensions method
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``2(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``3(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``4(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``5(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``6(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4},System.Threading.Tasks.Task{``5})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``7(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4},System.Threading.Tasks.Task{``5},System.Threading.Tasks.Task{``6})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.Components.TaskExtensions.WhenAll``8(System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4},System.Threading.Tasks.Task{``5},System.Threading.Tasks.Task{``6},System.Threading.Tasks.Task{``7})">
            <summary>
            Given multiple tasks that return values, wait for them all to complete and then return a tuple that contains the results (in the order in which the tasks are specified as method arguments).
            If any of the tasks fail then an exception will be raised.
            </summary>
        </member>
        <member name="M:Tesserae.HTML.DomObserver.WhenMounted(Retyped.dom.HTMLElement,System.Action)">
            <summary>
            Some rendering libraries don't support rendering to a container until that container is mounted but the way that we commonly write components is to return an element that the caller will
            mount, which is a problem for componentizing those libraries. One workaround is to postpone the initialization until the element is mounted, which is made possible by this method. It
            will execute the specified action when the element is added to the document body. While there is at least one element being tracked in this manner, there is a marginal cost as all
            DOM manipulations will be tracked and any added elements will be checked (and all of their child elements checked) to see if they match one of the elements that we're interested
            in. The cost should be negligible but if there is a process that is going to make large and frequent updates to the DOM then it may be better to avoid having any elements in
            the notify-when-mounted list.
            </summary>
        </member>
        <member name="M:Tesserae.HTML.DomObserver.WhenRemoved(Retyped.dom.HTMLElement,System.Action)">
            <summary>
            When there is some relating tidying up that must be done when a component is removed from the DOM, this method may be used to enable that - it will execute the specified action when
            the element is removed. While there is at least one element being tracked in this manner, there is a marginal cost as all DOM manipulations will be tracked and any removed elements
            will be checked (and all of their child elements checked) to see if they match one of the elements that we're interested in. The cost should be negligible but if there is a process
            that is going to make large and frequent updates to the DOM then it may be better to avoid having any elements in the notify-when-removed list.
            </summary>
        </member>
        <member name="T:Tesserae.Observable`1">
            <summary>
            Enables monitoring of changes for a variable of type T (this class is for listeners only, if updating the value is required then the SettableObserver should be used)
            </summary>
            <typeparam name="T">An immutable type to be observed. Be careful with non-imutable types, as they may be changed in ways that will not be repoted here</typeparam>
        </member>
        <member name="T:Tesserae.ReadOnlyArray`1">
             <summary>
             This is essentially a type alias for a typed array that may be present on method parameters to specify that the method will not mutate the data. It only exists at compile time, at runtime the reference
             will be the underlying array. This means that there is no cost to casting to this type from an array (so even very large arrays may be cast to it without there being any worries regarding performance
             and whether every element will be visited and copied during the translation).
            
             It is somewhat similar to the ReadOnlyCollection return when AsReadOnly() is called on a List - it may only be used to indicate that the receiver of the read only reference will not change the data, it
             does not guarantee that the data itself is immutable (if something still holds a reference to the mutable array then changing that content will result in those changes appearing through the read only
             wrapper).
             </summary>
        </member>
        <member name="M:Tesserae.ArrayExtensions.AsReadOnlyArray``1(``0[])">
            <summary>
            Depending upon the use case, the code may be clearer if this extension method or used or it may be clearer to rely upon and explicit or implicit cast from array to ReadOnlyArray
            </summary>
        </member>
        <member name="T:Tesserae.SettableObservable`1">
            <summary>
            Encapsulates a variable of type T, and enables monitoring for changes as well as the ability to update that value (which will trigger a ValueChanged event)
            </summary>
            <typeparam name="T">An immutable type to be observed. Be careful with non-imutable types, as you can change them in ways that will not be visible here</typeparam>
        </member>
    </members>
</doc>
