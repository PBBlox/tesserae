//This file is automatically generated during the build process

using System;
namespace Tesserae.Tests
{

    internal class SamplesSourceCode
    {
        public static string GetCodeForSample(string sampleName)
        {
            switch(sampleName)
            {
                case "BreadcrumbSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class BreadcrumbSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public BreadcrumbSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(BreadcrumbSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"Breadcrumbs should be used as a navigational aid in your app or site. They indicate the current page’s location within a hierarchy and help the user understand where they are in relation to the rest of that hierarchy. They also afford one-click access to higher levels of that hierarchy.\"),\r\n                TextBlock(\"Breadcrumbs are typically placed, in horizontal form, under the masthead or navigation of an experience, above the primary content area.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Place Breadcrumbs at the top of a page, above a list of items, or above the main content of a page.\")\r\n                    ),\r\n            Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Don't\"),\r\n                SampleDont(\"Don't use Breadcrumbs as a primary way to navigate an app or site.\")))))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    Label(\"Selected: \").SetContent(TextBlock().Var(out var msg)),\r\n                    TextBlock(\"All Visible\").Medium(),\r\n                    Breadcrumb().PaddingTop(16.px()).PaddingBottom(16.px()).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s,e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")).Disabled(),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"All Visible, Small\").Medium(),\r\n                    Breadcrumb().Small().PaddingTop(16.px()).PaddingBottom(16.px()).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")).Disabled(),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"Collapse 200px\").Medium(),\r\n                    Breadcrumb().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(200.px()).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n                    ,\r\n\r\n                    TextBlock(\"Collapse 200px, Small\").Medium(),\r\n                    Breadcrumb().PaddingTop(16.px()).PaddingBottom(16.px()).Small().MaxWidth(200.px()).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n                    ,\r\n                    TextBlock(\"Collapse 300px\").Medium(),\r\n                    Breadcrumb().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(300.px()).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"Collapse 300px, from second, custom chevron\").Medium(),\r\n                    Breadcrumb().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(300.px()).SetChevron(\"fa-plane\").SetOverflowIndex(1).Items(\r\n                        Crumb(\"Folder 1\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Crumb(\"Folder 2\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Crumb(\"Folder 3\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Crumb(\"Folder 4\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Crumb(\"Folder 5\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Crumb(\"Folder 6\").OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ButtonSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ButtonSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ButtonSample()\r\n        {\r\n            _content = SectionStack()\r\n                .Title(SampleHeader(nameof(ButtonSample)))\r\n                    .Section(Stack().Children(\r\n                        SampleTitle(\"Overview\"),\r\n                        TextBlock(\"Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.\"),\r\n                        TextBlock(\"When considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.\"),\r\n                        TextBlock(\"While buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.\"))\r\n                )\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Best Practices\"),\r\n                        Stack().Horizontal().Children(\r\n                            Stack().Children(\r\n                                SampleSubTitle(\"Do\"),\r\n                                SampleDo(\"Make sure the label conveys a clear purpose of the button to the user.\"),\r\n                                SampleDo(\"Button labels must describe the action the button will perform and should include a verb. Use concise, specific, self-explanatory labels, usually a single word.\"),\r\n                                SampleDo(\"Buttons should always include a noun if there is any room for interpretation about what the verb operates on.\"),\r\n                                SampleDo(\"Consider the affect localization will have on the button and what will happen to components around it.\"),\r\n                                SampleDo(\"If the button’s label content is dynamic, consider how the button will resize and what will happen to components around it.\"),\r\n                                SampleDo(\"Use only a single line of text in the label of the button.\"),\r\n                                SampleDo(\"Expose only one or two buttons to the user at a time, for example, \\\"Accept\\\" and \\\"Cancel\\\". If you need to expose more actions to the user, consider using checkboxes or radio buttons from which the user can select actions, with a single command button to trigger those actions.\"),\r\n                                SampleDo(\"Show only one primary button that inherits theme color at rest state. In the event there are more than two buttons with equal priority, all buttons should have neutral backgrounds.\"),\r\n                                SampleDo(\"\\\"Submit\\\", \\\"OK\\\", and \\\"Apply\\\" buttons should always be styled as primary buttons. When \\\"Reset\\\" or \\\"Cancel\\\" buttons appear alongside one of the above, they should be styled as secondary buttons.\"),\r\n                                SampleDo(\"Default buttons should always perform safe operations. For example, a default button should never delete.\"),\r\n                                SampleDo(\"Use task buttons to cause actions that complete a task or cause a transitional task. Do not use buttons to toggle other UX in the same context. For example, a button may be used to open an interface area but should not be used to open an additional set of components in the same interface.\")\r\n                            ),\r\n                            Stack().Children(\r\n                                SampleSubTitle(\"Don't\"),\r\n                                SampleDont(\"Don't use generic labels like \\\"Ok, \\\" especially in the case of an error; errors are never \\\"Ok.\\\"\"),\r\n                                SampleDont(\"Don’t place the default focus on a button that destroys data. Instead, place the default focus on the button that performs the \\\"safe act\\\" and retains the content (i.e. \\\"Save\\\") or cancels the action (i.e. \\\"Cancel\\\").\"),\r\n                                SampleDont(\"Don’t use a button to navigate to another place, use a link instead. The exception is in a wizard where \\\"Back\\\" and \\\"Next\\\" buttons may be used.\"),\r\n                                SampleDont(\"Don’t put too much text in a button - try to keep the length of your text to a minimum.\"),\r\n                                SampleDont(\"Don't put anything other than text in a button.\")\r\n                            ))\r\n                ))\r\n                .Section(\r\n                    Stack().Children(\r\n                        SampleTitle(\"Usage\"),\r\n                        TextBlock(\"Default Button\").Medium(),\r\n                        Stack().Horizontal().Children(\r\n                            Button().Var(out var btn1).SetText(\"Standard\").OnClick((s, e) => alert(\"Clicked!\")),\r\n                            Button().Var(out var btn2).SetText(\"Primary\").Primary().OnClick((s, e) => alert(\"Clicked!\")),\r\n                            Button().Var(out var btn3).SetText(\"Link\").Link().OnClick((s, e) => alert(\"Clicked!\"))\r\n                        ),\r\n                        TextBlock(\"Icon Button\").Medium(),\r\n                        Stack().Horizontal().Children(\r\n                            Button().Var(out var iconBtn1).SetText(\"Confirm\").SetIcon(\"las la-check\").Success().OnClick((s, e) => alert(\"Clicked!\")),\r\n                            Button().Var(out var iconBtn2).SetText(\"Delete\").SetIcon(\"las la-trash-alt\").Danger().OnClick((s, e) => alert(\"Clicked!\")),\r\n                            Button().Var(out var iconBtn3).SetText(\"Primary\").SetIcon(\"las la-minus\").Primary().OnClick((s, e) => alert(\"Clicked!\")),\r\n                            Button().Var(out var iconBtn4).SetText(\"Copy date\").SetIcon(\"las la-calendar-alt\").OnClick((s, e) => Clipboard.Copy(DateTime.Now.ToString()))\r\n                        ),\r\n                        Toggle(\"Disable buttons\").Checked().OnChange((s, e) =>\r\n                        {\r\n                            btn1.IsEnabled = btn2.IsEnabled  = btn3.IsEnabled = iconBtn1.IsEnabled = iconBtn2.IsEnabled  = iconBtn3.IsEnabled = iconBtn4.IsEnabled = s.IsChecked;\r\n                        })));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "CheckBoxSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class CheckBoxSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public CheckBoxSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(CheckBoxSample)))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Overview\"),\r\n                    TextBlock(\"A CheckBox is a UI element that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap. It can also be used to indicate a subordinate setting or preference when paired with another control.\"),\r\n                    TextBlock(\"A CheckBox is used to select or deselect action items. It can be used for a single item or for a list of multiple items that a user can choose from. The control has two selection states: unselected and selected.\"),\r\n                    TextBlock(\"Use a single CheckBox for a subordinate setting, such as with a \\\"Remember me ? \\\" login scenario or with a terms of service agreement.\"),\r\n                    TextBlock(\"For a binary choice, the main difference between a CheckBox and a toggle switch is that the CheckBox is for status and the toggle switch is for action. You can delay committing a CheckBox interaction (as part of a form submit, for example), while you should immediately commit a toggle switch interaction. Also, only CheckBoxes allow for multi-selection.\"),\r\n                    TextBlock(\"Use multiple CheckBoxes for multi-select scenarios in which a user chooses one or more items from a group of choices that are not mutually exclusive.\")\r\n                    ))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Best Practices\"),\r\n                    Stack().Horizontal().Children(\r\n                        Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Do\"),\r\n                            SampleDo(\"Allow users to choose any combination of options when several CheckBoxes are grouped together.\")\r\n                        ),\r\n                        Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"Don't use a CheckBox as an on/off control. Instead use a toggle switch.\"),\r\n                            SampleDont(\"Don’t use a CheckBox when the user can choose only one option from the group, use radio buttons instead.\"),\r\n                            SampleDont(\"Don't put two groups of CheckBoxes next to each other. Separate the two groups with labels.\")\r\n                        ))))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    TextBlock(\"Basic CheckBoxes\").Medium(),\r\n                    CheckBox(\"Unchecked checkbox\"),\r\n                    CheckBox(\"Checked checkbox\").Checked(),\r\n                    CheckBox(\"Disabled checkbox\").Disabled(),\r\n                    CheckBox(\"Disabled checked checkbox\").Checked().Disabled()\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ChoiceGroupSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ChoiceGroupSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ChoiceGroupSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(ChoiceGroupSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"The ChoiceGroup component, also known as radio buttons, let users select one option from two or more choices. Each option is represented by one ChoiceGroup button; a user can select only one ChoiceGroup in a button group.\"),\r\n                TextBlock(\"ChoiceGroup emphasize all options equally, and that may draw more attention to the options than necessary. Consider using other controls, unless the options deserve extra attention from the user. For example, if the default option is recommended for most users in most situations, use a Dropdown component instead.\"),\r\n                TextBlock(\"If there are only two mutually exclusive options, combine them into a single Checkbox or Toggle switch. For example, use a Checkbox for \\\"I agree\\\" instead of ChoiceGroup buttons for \\\"I agree\\\" and \\\"I don't agree.\\\"\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                    Stack().Width(40.percent()).Children(\r\n                        SampleSubTitle(\"Do\"),\r\n                        SampleDo(\"Use when there are 2-7 options, if you have enough screen space and the options are important enough to be a good use of that screen space. Otherwise, use a Checkbox or Dropdown list.\"),\r\n                        SampleDo(\"Use on wizard pages to make the alternatives clear, even if a Checkbox is otherwise acceptable.\"),\r\n                        SampleDo(\"List the options in a logical order, such as most likely to be selected to least, simplest operation to most complex, or least risk to most. Alphabetical ordering is not recommended because it is language dependent and therefore not localizable.\"),\r\n                        SampleDo(\"If none of the options is a valid choice, add another option to reflect this choice, such as \\\"None\\\" or \\\"Does not apply\\\".\"),\r\n                        SampleDo(\"Select the safest (to prevent loss of data or system access) and most secure and private option as the default. If safety and security aren't factors, select the most likely or convenient option.\"),\r\n                        SampleDo(\"Align radio buttons vertically instead of horizontally, if possible. Horizontal alignment is harder to read and localize.\")),\r\n                    Stack().Width(40.percent()).Children(\r\n                        SampleSubTitle(\"Don't\"),\r\n                        SampleDont(\"Use when the options are numbers that have fixed steps, like 10, 20, 30. Use a Slider component instead.\"),\r\n                        SampleDont(\"Use if there are more than 7 options, use a Dropdown instead.\"),\r\n                        SampleDont(\"Nest with other ChoiceGroup or CheckBoxes. If possible, keep all the options at the same level.\")))))\r\n            .Section(\r\n                Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    TextBlock(\"Default ChoiceGroup\").Medium(),\r\n                    ChoiceGroup().Options(\r\n                        Option(\"Option A\"),\r\n                        Option(\"Option B\"),\r\n                        Option(\"Option C\").Disabled(),\r\n                        Option(\"Option D\")),\r\n                    TextBlock(\"Required ChoiceGroup with a custom label\").Medium(),\r\n                    ChoiceGroup(\"Custom label\").Required().Options(\r\n                        Option(\"Option A\"),\r\n                        Option(\"Option B\"),\r\n                        Option(\"Option C\").Disabled(),\r\n                        Option(\"Option D\")),\r\n                    TextBlock(\"Horizontal ChoiceGroup\").Medium(),\r\n                    ChoiceGroup().Horizontal().Options(\r\n                        Option(\"Option A\"),\r\n                        Option(\"Option B\"),\r\n                        Option(\"Option C\").Disabled(),\r\n                        Option(\"Option D\"))));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ContextMenuSample": return "using System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Retyped;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ContextMenuSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ContextMenuSample()\r\n        {\r\n            var d = ContextMenu();\r\n            var msg = TextBlock();\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(ContextMenuSample)))\r\n                        .Section(Stack().Children(SampleTitle(\"Overview\"),\r\n                                                 TextBlock(\"ContextualMenus are lists of commands that are based on the context of selection, mouse hover or keyboard focus. They are one of the most effective and highly used command surfaces, and can be used in a variety of places.\")))\r\n                        .Section(Stack().Children(SampleTitle(\"Best Practices\"),\r\n                                                  Stack().Horizontal().Children(Stack().Width(40.percent()).Children(\r\n                                                    SampleSubTitle(\"Do\"),\r\n                                                    SampleDo(\"Use to display commands.\"),\r\n                                                    SampleDo(\"Divide groups of commands with rules.\"),\r\n                                                    SampleDo(\"Use selection checks without icons.\"),\r\n                                                    SampleDo(\"Provide submenus for sets of related commands that aren’t as critical as others.\")),\r\n                                                  Stack().Width(40.percent()).Children(\r\n                                                    SampleSubTitle(\"Don't\"),\r\n                                                    SampleDont(\"Use them to display content.\"),\r\n                                                    SampleDont(\"Show commands as one large group.\"),\r\n                                                    SampleDont(\"Mix checks and icons.\"),\r\n                                                    SampleDont(\"Create submenus of submenus.\")))))\r\n                        .Section(Stack().Children(SampleTitle(\"Usage\"),\r\n                                                  TextBlock(\"Basic ContextMenus\").Medium(),\r\n                                                  Stack().Width(40.percent()).Children(\r\n                                                    Label(\"Standard with Headers\").SetContent(\r\n                                                        Button(\"Open\").Var(out var btn2).OnClick((s, e) =>\r\n                                                            ContextMenu().Items(\r\n                                                            ContextMenuItem(\"New\").OnClick((s2,e2) => msg.Text(\"Clicked: New\")),\r\n                                                            ContextMenuItem().Divider(),\r\n                                                            ContextMenuItem(\"Edit\").OnClick((s2, e2) => msg.Text(\"Clicked: Edit\")),\r\n                                                            ContextMenuItem(\"Properties\").OnClick((s2, e2) => msg.Text(\"Clicked: Properties\")),\r\n                                                            ContextMenuItem(\"Header\").Header(),\r\n                                                            ContextMenuItem(\"Disabled\").Disabled(),\r\n                                                            ContextMenuItem(\"Link\").OnClick((s2, e2) => msg.Text(\"Clicked: Link\"))\r\n                                                            ).ShowFor(btn2)\r\n                                            )), msg)));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "DeferSample": return "using System;\r\nusing System.Threading.Tasks;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class DeferSample: IComponent\r\n    {\r\n        private IComponent content;\r\n\r\n        public DeferSample()\r\n        {\r\n            var stack = SectionStack();\r\n            var countSlider = Slider(5, 0, 10, 1);\r\n            content = SectionStack()\r\n                .Title(SampleHeader(nameof(DeferSample)))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Overview\"),\r\n                    TextBlock(\"Use Defer() to render asyncronous components. The asyncronous task is only triggered on the first render of the Defer component\")))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                Stack().Children(\r\n                    Stack().Horizontal().Children(\r\n                        Stack().Children(\r\n                            Label(\"Number of items:\").SetContent(countSlider.OnInput((s, e) => SetChildren(stack, s.Value)))\r\n                            )\r\n                        )\r\n                    ),\r\n                    stack.HeightAuto()\r\n            ));\r\n            SetChildren(stack, 5);\r\n        }\r\n\r\n        private void SetChildren(SectionStack stack, int count)\r\n        {\r\n            stack.Clear();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                var delay = (i + 1) * 1_000;\r\n                stack.Section(Stack().Children(\r\n                TextBlock($\"Section {i} - delayed {i + 1} seconds\").MediumPlus().SemiBold(),\r\n\r\n                Defer(async () =>\r\n                {\r\n                    await Task.Delay(delay);\r\n                    return Stack().Children(\r\n                        TextBlock(\"Wrap (Default)\").SmallPlus(),\r\n                        TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").Width(50.percent()),\r\n                        TextBlock(\"No Wrap\").SmallPlus(),\r\n                        TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").NoWrap().Width(50.percent())\r\n                    );\r\n                }\r\n                )));\r\n            }\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "DetailsListSample": return "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Tesserae.Components;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing static Tesserae.UI;\r\nusing static Retyped.dom;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class DetailsListSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public DetailsListSample()\r\n        {\r\n            _content =\r\n                SectionStack()\r\n                    .Title(SampleHeader(nameof(DetailsListSample)))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Overview\"),\r\n                                TextBlock(\"DetailsList is a derivative of the List component. It is a robust way to \" +\r\n                                          \"display an information rich collection of items. It can support powerful \" +\r\n                                          \"ways to aid a user in finding content with sorting, grouping and \" +\r\n                                          \"filtering.  Lists are a great way to handle large amounts of content, \" +\r\n                                          \"but poorly designed Lists can be difficult to parse.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"Use a DetailsList when density of information is critical. Lists can \" +\r\n                                          \"support single and multiple selection, as well as drag and drop and \" +\r\n                                          \"marquee selection. They are composed of a column header, which \" +\r\n                                          \"contains the metadata fields which are attached to the list items, \" +\r\n                                          \"and provide the ability to sort, filter and even group the list. \" +\r\n                                          \"List items are composed of selection, icon, and name columns at \" +\r\n                                          \"minimum. One can also include other columns such as Date Modified, or \" +\r\n                                          \"any other metadata field associated with the collection. Place the most \" +\r\n                                          \"important columns from left to right for ease of recall and comparison.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"DetailsList is classically used to display files, but is also used to \" +\r\n                                          \"render custom lists that can be purely metadata. Avoid using file type \" +\r\n                                          \"icon overlays to denote status of a file as it can make the entire icon \" +\r\n                                          \"unclear. Be sure to leave ample width for each column’s data. \" +\r\n                                          \"If there are multiple lines of text in a column, \" +\r\n                                          \"consider the variable row height variant.\")))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Best Practices\"),\r\n                                Stack()\r\n                                    .Horizontal()\r\n                                    .Children(\r\n                                        Stack()\r\n                                            .Width(40.percent())\r\n                                            .Children(\r\n                                                SampleSubTitle(\"Do\"),\r\n                                                SampleDo(\"Use them to display content.\"),\r\n                                                SampleDo(\"Provide useful columns of metadata.\"),\r\n                                                SampleDo(\"Display columns in order of importance left to right or \" +\r\n                                                         \"right to left depending on the standards of the culture.\"),\r\n                                                SampleDo(\"Give columns ample default width to display information.\")),\r\n                                        Stack()\r\n                                            .Width(40.percent())\r\n                                            .Children(\r\n                                                SampleSubTitle(\"Don't\"),\r\n                                                SampleDont(\"Use them to display commands or settings.\"),\r\n                                                SampleDont(\"Overload the view with too many columns that require \" +\r\n                                                         \"excessive horizontal scrolling.\"),\r\n                                                SampleDont(\"Make columns so narrow that it truncates the information \" +\r\n                                                         \"in typical cases.\")))))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Details List With Textual Rows\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                DetailsList<DetailsListSampleFileItem>(\r\n                                        IconColumn(Icon(LineAwesome.File), width: 32.px(),  enableColumnSorting: true, sortingKey: \"FileIcon\"),\r\n                                        DetailsListColumn(title: \"File Name\",         width: 350.px(), enableColumnSorting: true, sortingKey: \"FileName\", isRowHeader: true),\r\n                                        DetailsListColumn(title: \"Date Modified\",     width: 170.px(), enableColumnSorting: true, sortingKey: \"DateModified\"),\r\n                                        DetailsListColumn(title: \"Modified By\",       width: 150.px(), enableColumnSorting: true, sortingKey: \"ModifiedBy\"),\r\n                                        DetailsListColumn(title: \"File Size\",         width: 120.px(), enableColumnSorting: true, sortingKey: \"FileSize\"))\r\n                                    .Height(500.px())\r\n                                    .WithListItems(GetDetailsListItems())\r\n                                    .SortedBy(\"FileName\")\r\n                            .PaddingBottom(32.px()),\r\n                                TextBlock(\"Details List With Component Rows\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                DetailsList<DetailsListSampleItemWithComponents>(\r\n                                    IconColumn(Icon(LineAwesome.Apple), width: 32.px(), enableColumnSorting: true, sortingKey: \"Icon\"),\r\n                                    DetailsListColumn(title: \"CheckBox\", width: 120.px()),\r\n                                    DetailsListColumn(title: \"Name\", width: 250.px(), isRowHeader: true),\r\n                                    DetailsListColumn(title: \"Button\", width: 150.px()),\r\n                                    DetailsListColumn(title: \"ChoiceGroup\", width: 400.px()),\r\n                                    DetailsListColumn(title: \"Dropdown\", width: 250.px()),\r\n                                    DetailsListColumn(title: \"Toggle\", width: 100.px()))\r\n                                    .Compact()\r\n                                    .Height(500.px())\r\n                                    .WithListItems(GetComponentDetailsListItems())\r\n                                    .SortedBy(\"Name\")\r\n                            .PaddingBottom(32.px()),\r\n                                TextBlock(\"Details List With Empty List Message\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                DetailsList<DetailsListSampleFileItem>(\r\n                                        IconColumn(Icon(LineAwesome.File), width: 32.px(),  enableColumnSorting: true, sortingKey: \"FileIcon\"),\r\n                                        DetailsListColumn(title: \"File Name\",         width: 350.px(), enableColumnSorting: true, sortingKey: \"FileName\", isRowHeader: true),\r\n                                        DetailsListColumn(title: \"Date Modified\",     width: 170.px(), enableColumnSorting: true, sortingKey: \"DateModified\"),\r\n                                        DetailsListColumn(title: \"Modified By\",       width: 150.px(), enableColumnSorting: true, sortingKey: \"ModifiedBy\"),\r\n                                        DetailsListColumn(title: \"File Size\",         width: 120.px(), enableColumnSorting: true, sortingKey: \"FileSize\"))\r\n                                    .Compact()\r\n                                    .WithEmptyMessage(() => BackgroundArea(Card(TextBlock(\"Empty list\").Padding(16.px()))).WidthStretch().HeightStretch() )\r\n                                    .Height(500.px())\r\n                                    .WithListItems(new DetailsListSampleFileItem[0])\r\n                                    .SortedBy(\"Name\")));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private DetailsListSampleFileItem[] GetDetailsListItems()\r\n        {\r\n            return Enumerable\r\n                .Range(1, 100)\r\n                .SelectMany(number => new List<DetailsListSampleFileItem>\r\n                {\r\n                    new DetailsListSampleFileItem(\r\n                        fileIcon: LineAwesome.FileWord,\r\n                        fileName: \"Interesting File Name, quite long as you can see. In fact, let's make it \" +\r\n                                  \"longer to see how the padding looks.\",\r\n                        dateModified: DateTime.Today.AddDays(-10),\r\n                        modifiedBy: \"Dale Cooper\",\r\n                        fileSize: 10),\r\n                    new DetailsListSampleFileItem(\r\n                        fileIcon: LineAwesome.FileExcel,\r\n                        fileName: \"File Name 2\",\r\n                        dateModified: DateTime.Today.AddDays(-20),\r\n                        modifiedBy: \"Rusty\",\r\n                        fileSize: 12),\r\n                    new DetailsListSampleFileItem(\r\n                        fileIcon: LineAwesome.FilePowerpoint,\r\n                        fileName: \"File Name 3\",\r\n                        dateModified: DateTime.Today.AddDays(-30),\r\n                        modifiedBy: \"Cole\",\r\n                        fileSize: 15)\r\n            }).ToArray();\r\n        }\r\n\r\n        private DetailsListSampleItemWithComponents[] GetComponentDetailsListItems()\r\n        {\r\n            return Enumerable\r\n                .Range(1, 100)\r\n                .SelectMany(number => new List<DetailsListSampleItemWithComponents>\r\n                {\r\n                    new DetailsListSampleItemWithComponents()\r\n                        .WithIcon(LineAwesome.Code)\r\n                        .WithCheckBox(\r\n                            CheckBox(\"CheckBox\"))\r\n                        .WithName(\"Component Details List Item\")\r\n                        .WithButton(\r\n                            Button()\r\n                                .SetText(\"Primary\")\r\n                                .Primary()\r\n                                .OnClick(\r\n                                    (s, e) => alert(\"Clicked!\")))\r\n                        .WithChoiceGroup(\r\n                            ChoiceGroup()\r\n                                .Horizontal()\r\n                                .Options(\r\n                                     Option(\"Option A\"),\r\n                                     Option(\"Option B\").Disabled(),\r\n                                     Option(\"Option C\")))\r\n                        .WithDropdown(\r\n                            Dropdown()\r\n                                .Multi()\r\n                                .Items(\r\n                                    DropdownItem(\"Header 1\").Header(),\r\n                                    DropdownItem(\"1-1\"),\r\n                                    DropdownItem(\"1-2\").Selected(),\r\n                                    DropdownItem(\"1-3\"),\r\n                                    DropdownItem(\"1-4\").Disabled(),\r\n                                    DropdownItem(\"1-5\"),\r\n                                    DropdownItem(\"2-1\"),\r\n                                    DropdownItem(\"2-2\"),\r\n                                    DropdownItem(\"2-3\"),\r\n                                    DropdownItem(\"2-4\").Selected(),\r\n                                    DropdownItem(\"2-5\")))\r\n                        .WithToggle(Toggle())\r\n            }).ToArray();\r\n        }\r\n\r\n    }\r\n\r\n    public class DetailsListSampleFileItem : IDetailsListItem<DetailsListSampleFileItem>\r\n    {\r\n        public DetailsListSampleFileItem(LineAwesome fileIcon, string fileName, DateTime dateModified, string modifiedBy, int fileSize)\r\n        {\r\n            FileIcon = fileIcon;\r\n            FileName = fileName;\r\n            DateModified = dateModified;\r\n            ModifiedBy = modifiedBy;\r\n            FileSize = fileSize;\r\n        }\r\n\r\n        public LineAwesome FileIcon { get; }\r\n\r\n        public string FileName { get; }\r\n\r\n        public DateTime DateModified { get; }\r\n\r\n        public string ModifiedBy { get; }\r\n\r\n        public int FileSize { get; }\r\n\r\n        public bool EnableOnListItemClickEvent => true;\r\n\r\n        public void OnListItemClick(int listItemIndex)\r\n        {\r\n            alert($\"You clicked me! List item index: {listItemIndex}, my name is {FileName}\");\r\n        }\r\n\r\n        public int CompareTo(DetailsListSampleFileItem other, string columnSortingKey)\r\n        {\r\n            if (other == null)\r\n            {\r\n                throw new ArgumentException(nameof(other));\r\n            }\r\n\r\n            if (columnSortingKey.Equals(nameof(FileIcon)))\r\n            {\r\n                return FileIcon.CompareTo(other.FileIcon);\r\n            }\r\n\r\n            if (columnSortingKey.Equals(nameof(FileName)))\r\n            {\r\n                return string.Compare(FileName, other.FileName, StringComparison.Ordinal);\r\n            }\r\n\r\n            if (columnSortingKey.Equals(nameof(DateModified)))\r\n            {\r\n                return DateModified.CompareTo(other.DateModified);\r\n            }\r\n\r\n            if (columnSortingKey.Equals(nameof(ModifiedBy)))\r\n            {\r\n                return string.Compare(FileName, other.FileName, StringComparison.Ordinal);\r\n            }\r\n\r\n            if (columnSortingKey.Equals(nameof(FileSize)))\r\n            {\r\n                return FileSize.CompareTo(other.FileSize);\r\n            }\r\n\r\n            throw new InvalidOperationException($\"Can not match {columnSortingKey} to current list item\");\r\n        }\r\n\r\n        public IEnumerable<IComponent> Render(IList<IDetailsListColumn> columns, Func<IDetailsListColumn, Func<IComponent>, IComponent> createGridCellExpression)\r\n        {\r\n            yield return createGridCellExpression(columns[0], () => Icon(FileIcon));\r\n            yield return createGridCellExpression(columns[1], () => TextBlock(FileName));\r\n            yield return createGridCellExpression(columns[2], () => TextBlock(DateModified.ToShortDateString()));\r\n            yield return createGridCellExpression(columns[3], () => TextBlock(ModifiedBy));\r\n            yield return createGridCellExpression(columns[4], () => TextBlock(FileSize.ToString()));\r\n        }\r\n    }\r\n\r\n    public class DetailsListSampleItemWithComponents : IDetailsListItem<DetailsListSampleItemWithComponents>\r\n    {\r\n        public LineAwesome Icon { get; private set; }\r\n\r\n        public CheckBox CheckBox { get; private set; }\r\n\r\n        public string Name { get; private set; }\r\n\r\n        public Button Button { get; private set; }\r\n\r\n        public ChoiceGroup ChoiceGroup { get; private set; }\r\n\r\n        public Dropdown Dropdown { get; private set; }\r\n\r\n        public Toggle Toggle { get; private set; }\r\n\r\n        public bool EnableOnListItemClickEvent => false;\r\n\r\n        public void OnListItemClick(int listItemIndex)\r\n        {\r\n        }\r\n\r\n        public int CompareTo(DetailsListSampleItemWithComponents other, string columnSortingKey)\r\n        {\r\n            return 0;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithIcon(LineAwesome icon)\r\n        {\r\n            Icon = icon;\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithCheckBox(CheckBox checkBox)\r\n        {\r\n            CheckBox = checkBox;\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithName(string name)\r\n        {\r\n            Name = name;\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithButton(Button button)\r\n        {\r\n            Button = button;\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithChoiceGroup(ChoiceGroup choiceGroup)\r\n        {\r\n            ChoiceGroup = choiceGroup;\r\n\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithDropdown(Dropdown dropdown)\r\n        {\r\n            Dropdown = dropdown;\r\n            return this;\r\n        }\r\n\r\n        public DetailsListSampleItemWithComponents WithToggle(Toggle toggle)\r\n        {\r\n            Toggle = toggle;\r\n            return this;\r\n        }\r\n\r\n        public IEnumerable<IComponent> Render(IList<IDetailsListColumn> columns, Func<IDetailsListColumn, Func<IComponent>, IComponent> createGridCellExpression)\r\n        {\r\n            yield return createGridCellExpression(columns[0], () => Icon(Icon));\r\n            yield return createGridCellExpression(columns[1], () => CheckBox);\r\n            yield return createGridCellExpression(columns[2], () => TextBlock(Name));\r\n            yield return createGridCellExpression(columns[3], () => Button);\r\n            yield return createGridCellExpression(columns[4], () => ChoiceGroup);\r\n            yield return createGridCellExpression(columns[5], () => Dropdown);\r\n            yield return createGridCellExpression(columns[6], () => Toggle);\r\n        }\r\n    }\r\n}\r\n";
                case "DialogSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class DialogSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public DialogSample()\r\n        {\r\n            var dialog = Dialog(\"Lorem Ipsum\");\r\n            var response = TextBlock();\r\n\r\n            _content = SectionStack()\r\n                .Title(SampleHeader(nameof(DialogSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"Dialogs are temporary, modal UI overlay that generally provide contextual app information or require user confirmation/input. In most cases, Dialogs block interactions with the web page or application until being explicitly dismissed, and often request action from the user. They are primarily used for lightweight creation or edit tasks, and simple management tasks.\"),\r\n                TextBlock(\"Best Practices\").MediumPlus()))\r\n            .Section(Stack().Children(\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Do\"),\r\n                SampleDo(\"Use Dialogs for quick, actionable interactions, such as making a choice or needing the user to provide information.\"),\r\n                SampleDo(\"When possible, try a non-blocking Dialog before resorting to a blocking Dialog.\"),\r\n                SampleDo(\"Only include information needed to help users make a decision.\"),\r\n                SampleDo(\"Button text should reflect the actions available to the user (e.g. save, delete).\"),\r\n                SampleDo(\"Validate that the user's entries are acceptable before closing the Dialog. Show an inline validation error near the field they must correct.\")),\r\n            Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Don't\"),\r\n                SampleDont(\"Don’t overuse Modals. In some cases they can be perceived as interrupting workflow, and too many can be a bad user experience.\"),\r\n                SampleDont(\"Avoid \\\"Are you sure ?\\\" or confirmation Dialogs unless the user is making an irreversible or destructive choice.\"),\r\n                SampleDont(\"Do not use a blocking Dialog unless absolutely necessary because they are very disruptive.\"),\r\n                SampleDont(\"Don’t have long sentences or complicated choices.\"),\r\n                SampleDont(\"Avoid generic button labels like \\\"Ok\\\" if you can be more specific about the action a user is about to complete.\"),\r\n                SampleDont(\"Don't dismiss the Dialog if underlying problem is not fixed. Don't put the user back into a broken/error state.\"),\r\n                SampleDont(\"Don't provide the user with more than 3 buttons.\")))))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Usage\"),\r\n                Button(\"Open Dialog\").OnClick((c, ev) => dialog.Show()),\r\n                Stack().Horizontal().Children(\r\n                Button(\"Open YesNo\").OnClick((c, ev)             => Dialog(\"Sample Dialog\").YesNo(() => response.Text(\"Clicked Yes\"), () => response.Text(\"Clicked No\"))),\r\n                Button(\"Open YesNoCancel\").OnClick((c, ev)       => Dialog(\"Sample Dialog\").YesNoCancel(() => response.Text(\"Clicked Yes\"), () => response.Text(\"Clicked No\"), () => response.Text(\"Clicked Cancel\"))),\r\n                Button(\"Open Ok\").OnClick((c, ev)                => Dialog(\"Sample Dialog\").Ok(() => response.Text(\"Clicked Ok\"))),\r\n                Button(\"Open RetryCancel\").OnClick((c, ev)       => Dialog(\"Sample Dialog\").RetryCancel(() => response.Text(\"Clicked Retry\"), () => response.Text(\"Clicked Cancel\")))),\r\n                Button(\"Open YesNo with dark overlay\").OnClick((c, ev)       => Dialog(\"Sample Dialog\").Dark().YesNo(() => response.Text(\"Clicked Yes\"), () => response.Text(\"Clicked No\"), y => y.Success().SetText(\"Yes!\"), n => n.Danger().SetText(\"Nope\"))),\r\n                Button(\"Open YesNoCancel with dark overlay\").OnClick((c, ev) => Dialog(\"Sample Dialog\").Dark().YesNoCancel(() => response.Text(\"Clicked Yes\"), () => response.Text(\"Clicked No\"), () => response.Text(\"Clicked Cancel\"))),\r\n                Button(\"Open Ok with dark overlay\").OnClick((c, ev)          => Dialog(\"Sample Dialog\").Dark().Ok(() => response.Text(\"Clicked Ok\"))),\r\n                Button(\"Open RetryCancel with dark overlay\").OnClick((c, ev) => Dialog(\"Sample Dialog\").Dark().RetryCancel(() => response.Text(\"Clicked Retry\"), () => response.Text(\"Clicked Cancel\"))),\r\n                response));\r\n                dialog.Content(Stack().Children(TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"),\r\n                                                Toggle(\"Is draggable\").OnChange((c, ev) => dialog.IsDraggable = c.IsChecked),\r\n                                                Toggle(\"Is dark overlay\").OnChange((c, ev) => dialog.IsDark = c.IsChecked).Checked(dialog.IsDark)\r\n                                                ))\r\n                      .Commands(Button(\"Send\").Primary().AlignEnd().OnClick((c, ev) => dialog.Hide()), Button(\"Don`t send\").AlignEnd().OnClick((c, ev) => dialog.Hide()));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "DropdownSample": return "using System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Retyped;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class DropdownSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public DropdownSample()\r\n        {\r\n            var d = Dropdown();\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(DropdownSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"A Dropdown is a list in which the selected item is always visible, and the others are visible on demand by clicking a drop-down button. They are used to simplify the design and make a choice within the UI. When closed, only the selected item is visible. When users click the drop-down button, all the options become visible. To change the value, users open the list and click another value or use the arrow keys (up and down) to select a new value.\")))\r\n            .Section(Stack().Children(SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Use a Dropdown when there are multiple choices that can be collapsed under one title. Or if the list of items is long or when space is constrained.\"),\r\n                    SampleDo(\"Use shortened statements or single words as options.\"),\r\n                    SampleDo(\"Use a Dropdown when the selected option is more important than the alternatives (in contrast to radio buttons where all the choices are visible putting more emphasis on the other options).\")\r\n                    ),\r\n            Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Don't\"),\r\n                SampleDo(\"Use if there are less than 7 options, use a ChoiceGroup instead.\")))))\r\n                .Section(Stack().Children(\r\n                SampleTitle(\"Usage\"),\r\n                TextBlock(\"Basic Dropdowns\").Medium(),\r\n            Stack().Width(40.percent()).Children(\r\n                Label(\"Standard\").SetContent(Dropdown().Items(\r\n                DropdownItem(\"1-1\").Selected(),\r\n                DropdownItem(\"1-2\")\r\n                ))),\r\n            Stack().Width(40.percent()).Children(\r\n                Label(\"Standard with Headers\").SetContent(Dropdown().Items(\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\"),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\").Selected(),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n                )),\r\n            Label(\"Multi-select with custom on-selected text\").SetContent(Dropdown().Multi().Items(\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\", \"H1-1-1\"),\r\n                DropdownItem(\"1-2\", \"H1-1-2\").Selected(),\r\n                DropdownItem(\"1-3\", \"H1-1-3\"),\r\n                DropdownItem(\"1-4\", \"H1-1-4\").Disabled(),\r\n                DropdownItem(\"1-5\", \"H1-1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\", \"H2-2-1\"),\r\n                DropdownItem(\"2-2\", \"H2-2-2\"),\r\n                DropdownItem(\"2-3\", \"H2-2-3\"),\r\n                DropdownItem(\"2-4\", \"H2-2-4\").Selected(),\r\n                DropdownItem(\"2-5\", \"H2-2-5\")\r\n                )),\r\n            Label(\"Validation\").SetContent(d.Items(\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\").Selected(),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\"),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n                )),\r\n            Label(\"Disabled\").SetContent(Dropdown().Disabled().Items(\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\").Selected(),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\"),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n            )),\r\n            Label(\"Required\").SetContent(Dropdown().Required().Items(\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\").Selected(),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\"),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n            )),\r\n            Label(\"Async 5 seconds delay\").SetContent(Dropdown().Items(GetItemsAsync)),\r\n            Label(\"Async wait Google.com (need CORS)\").SetContent(Dropdown().Items(GetGoogleItemsAsync)))));\r\n            d.Attach((e, _) =>\r\n            {\r\n                var dd = (Dropdown) e;\r\n                if (dd.SelectedItems.Length != 1 || dd.SelectedItems[0].Text != \"1-1\")\r\n                {\r\n                    dd.IsInvalid = true;\r\n                    dd.Error = \"Some error happens, need 1-1\";\r\n                }\r\n                else dd.IsInvalid = false;\r\n            }, Validation.Mode.OnInput);\r\n        }\r\n\r\n        private async Task<Dropdown.Item[]> GetItemsAsync()\r\n        {\r\n            await Task.Delay(5000);\r\n\r\n            return new[]\r\n            {\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\"),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\"),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n            };\r\n        }\r\n\r\n        private async Task<Dropdown.Item[]> GetGoogleItemsAsync()\r\n        {\r\n            try\r\n            {\r\n                await GetAsync(\"http://google.com\");\r\n            }\r\n            catch\r\n            {\r\n                await Task.Delay(1000);\r\n            }\r\n\r\n            return new[]\r\n            {\r\n                DropdownItem(\"Header 1\").Header(),\r\n                DropdownItem(\"1-1\"),\r\n                DropdownItem(\"1-2\"),\r\n                DropdownItem(\"1-3\"),\r\n                DropdownItem(\"1-4\").Disabled(),\r\n                DropdownItem(\"1-5\"),\r\n                DropdownItem().Divider(),\r\n                DropdownItem(\"Header 2\").Header(),\r\n                DropdownItem(\"2-1\"),\r\n                DropdownItem(\"2-2\"),\r\n                DropdownItem(\"2-3\"),\r\n                DropdownItem(\"2-4\"),\r\n                DropdownItem(\"2-5\")\r\n            };\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private async Task<string> GetAsync(string url)\r\n        {\r\n            var xmlHttp = new XMLHttpRequest();\r\n            xmlHttp.open(\"GET\", url, true);\r\n\r\n            xmlHttp.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n\r\n            var tcs = new TaskCompletionSource<string>();\r\n\r\n            xmlHttp.onreadystatechange = (e) =>\r\n            {\r\n                if (xmlHttp.readyState == 0)\r\n                {\r\n                    tcs.SetException(new Exception(\"Request aborted\"));\r\n                }\r\n                else if (xmlHttp.readyState == 4)\r\n                {\r\n                    if (xmlHttp.status == 200 || xmlHttp.status == 201 || xmlHttp.status == 304)\r\n                    {\r\n                        tcs.SetResult(xmlHttp.responseText);\r\n                    }\r\n                    else tcs.SetException(new Exception(\"Request failed\"));\r\n                }\r\n            };\r\n\r\n            xmlHttp.send();\r\n\r\n            var tcsTask = tcs.Task;\r\n\r\n            while (true)\r\n            {\r\n                await Task.WhenAny(tcsTask, Task.Delay(150));\r\n\r\n                if (tcsTask.IsCompleted)\r\n                {\r\n                    if (tcsTask.IsFaulted)\r\n                    {\r\n                        throw tcsTask.Exception;\r\n                    }\r\n                    else\r\n                    {\r\n                        return tcsTask.Result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n";
                case "EditableLabelSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class EditableLabelSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public EditableLabelSample()\r\n        {\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(EditableLabelSample)))\r\n                        .Section(Stack()\r\n                                  .Children(SampleTitle(\"Overview\"),\r\n                                            TextBlock(\"Use for showing information that can be edited by users.\")))\r\n                      .Section(Stack()\r\n                                  .Children(SampleTitle(\"Best Practices\"),\r\n                                            Stack()\r\n                                               .Horizontal()\r\n                                               .Children(Stack()\r\n                                                         .Width(40.percent())\r\n                                                         .Children(SampleSubTitle(\"Do\"),\r\n                                                                  SampleDo(\"Use anywhere information can be edited easily by users.\")),\r\n                                                         Stack()\r\n                                                         .Width(40.percent())\r\n                                                         .Children(SampleSubTitle(\"Don't\"),\r\n                                                           SampleDont(\"Don’t forget to register a OnSave() callback\")))))\r\n                      .Section(Stack().Children(\r\n                                                SampleTitle(\"Usage\"),\r\n                                                TextBlock(\"Label\").Medium(),\r\n                                                EditableLabel(\"You can click to edit me\"),\r\n                                                EditableLabel(\"You can also change the font-size\").Large(),\r\n                                                EditableLabel(\"and weight as a normal label\").Large().Bold(),\r\n                                                TextBlock(\"Text Area\").Medium(),\r\n                                                EditableArea(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\\nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").Width(300.px())\r\n                                               ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "FileSelectorAndDropAreaSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class FileSelectorAndDropAreaSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public FileSelectorAndDropAreaSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(FileSelectorAndDropAreaSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"Use the file selector to allow users to select a single file. Use the file dropdown area to allow drag-and-drop for one or multiple files.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Filter files by supported types\"),\r\n                    SampleDo(\"Provide a message for the file drop area\"),\r\n                    SampleDo(\"Attach the OnUpload event handler\")\r\n                    ),\r\n            Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Don't\"),\r\n                SampleDont(\"TODO\")))))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    SampleSubTitle(\"File Selector\"),\r\n                    Label(\"Selected file size: \").Inline().SetContent(TextBlock(\"\").Var(out var size)),\r\n                    FileSelector().OnFileSelected((fs, e) => size.Text = fs.SelectedFile.size.ToString() + \" bytes\"),\r\n                    FileSelector().SetPlaceholder(\"You must select a zip file\").Required().SetAccepts(\".zip\").OnFileSelected((fs,e) => size.Text = fs.SelectedFile.size.ToString() + \" bytes\"),\r\n                    FileSelector().SetPlaceholder(\"Please select any image\").SetAccepts(\"image/*\").OnFileSelected((fs, e) => size.Text = fs.SelectedFile.size.ToString() + \" bytes\"),\r\n                    SampleSubTitle(\"File Drop Area\"),\r\n                    Label(\"Dropped Files: \").SetContent(Stack().Var(out var droppedFiles)),\r\n                    FileDropArea().OnFileDropped((s, e) => droppedFiles.Add(TextBlock(e.name).Small())).Multiple()\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "HorizontalSeparatorSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class HorizontalSeparatorSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public HorizontalSeparatorSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(HorizontalSeparatorSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"A separator visually separates content into groups.\"),\r\n                TextBlock(\"You can render content in the separator by specifying the component's children. The component's children can be plain text or a component like Icon. The content is center-aligned by default.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Explain what is the group this separator introduces\"),\r\n                    SampleDo(\"Be short and concise.\")\r\n                    ),\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Don't\"),\r\n                    SampleDont(\"Use long group names\")))))\r\n            .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    HorizontalSeparator(\"Center\"),\r\n                    HorizontalSeparator(\"Left\").Left(),\r\n                    HorizontalSeparator(\"Right\").Right(),\r\n                    SampleTitle(\"Custom Separators\"),\r\n                    HorizontalSeparator(Stack().Horizontal().Children(Icon(\"las la-plane\").AlignCenter().PaddingRight(8.px()), TextBlock(\"Custom Center\").SemiBold().MediumPlus().AlignCenter())).Primary(),\r\n                    HorizontalSeparator(Stack().Horizontal().Children(Icon(\"las la-plane\").AlignCenter().PaddingRight(8.px()), TextBlock(\"Custom Left\").SemiBold().MediumPlus().AlignCenter())).Primary().Left(),\r\n                    HorizontalSeparator(Stack().Horizontal().Children(Icon(\"las la-plane\").AlignCenter().PaddingRight(8.px()), TextBlock(\"Custom Right\").SemiBold().MediumPlus().AlignCenter())).Primary().Right()));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ItemsListSample": return "using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Tesserae.Components;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing static Tesserae.UI;\r\nusing static Retyped.dom;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ItemsListSample : IComponent\r\n    {\r\n        private readonly IComponent _content;\r\n\r\n        public ItemsListSample()\r\n        {\r\n            var obsList = new ObservableList<IComponent>();\r\n\r\n            var vs = VisibilitySensor((v) =>\r\n            {\r\n                obsList.Remove(v);\r\n                obsList.AddRange(GetSomeItems(20));\r\n                v.Reset();\r\n                obsList.Add(v);\r\n            });\r\n\r\n            obsList.AddRange(GetSomeItems(10));\r\n            obsList.Add(vs);\r\n            _content = SectionStack().WidthStretch()\r\n                        .Title(SampleHeader(nameof(ItemsListSample)))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Overview\"),\r\n                                TextBlock(\"List provides a base component for rendering small sets of items. \" +\r\n                                          \"It is agnostic of the tile component used, and selection \" +\r\n                                          \"management. These concerns can be layered separately.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"Performance is adequate for smaller lists, for large number of items use VirtualizedList.\")\r\n                                    .PaddingBottom(16.px())))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Basic List\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                ItemsList(GetSomeItems(10)).PaddingBottom(16.px()).Height(500.px()).PaddingBottom(32.px()),\r\n                                TextBlock(\"Basic List with columns\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                ItemsList(GetSomeItems(100), 25.percent(), 25.percent(), 25.percent(), 25 .percent()).Height(500.px()).PaddingBottom(32.px()),\r\n                                TextBlock(\"Basic List with VisibilitySensor\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                ItemsList(obsList, 25.percent(), 25.percent(), 25.percent(), 25.percent()).Height(500.px()).PaddingBottom(32.px()),\r\n                                TextBlock(\"Basic List with Empty List Message \")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                ItemsList(Enumerable.Empty<IComponent>(), 25.percent(), 25.percent(), 25.percent(), 25.percent())\r\n                                    .WithEmptyMessage(() => BackgroundArea(Card(TextBlock(\"Empty list\").Padding(16.px()))).WidthStretch().HeightStretch().MinHeight(100.px()))\r\n                                    .Height(500.px())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private IEnumerable<IComponent> GetSomeItems(int count)\r\n        {\r\n            return Enumerable\r\n                .Range(1, count)\r\n                .Select(number => Card(TextBlock($\"Lorem Ipsum {number}\").NonSelectable()).MinWidth(200.px()));\r\n        }\r\n    }\r\n}\r\n";
                case "LabelSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class LabelSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public LabelSample()\r\n        {\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(LabelSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Labels give a name or title to a component or group of components. Labels should be in close proximity to the component or group they are paired with. Some components, such as TextField, Dropdown, or Toggle, already have Labels incorporated, but other components may optionally add a Label if it helps inform the user of the component’s purpose.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                            Stack().Horizontal().Children(\r\n                            Stack().Width(40.percent()).Children(\r\n                                SampleSubTitle(\"Do\"),\r\n                                SampleDo(\"Use sentence casing, e.g. “First name”.\"),\r\n                                SampleDo(\"Be short and concise.\"),\r\n                                SampleDo(\"When adding a Label to components, use the text as a noun or short noun phrase.\")\r\n                                ),\r\n                        Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDo(\"Use Labels as instructional text, e.g. “Click to get started”.\"),\r\n                            SampleDo(\"Don’t use full sentences or complex punctuation (colons, semicolons, etc.).\")))))\r\n                            .Section(Stack().Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Label\").Medium(),\r\n                                Label(\"I'm Label\"),\r\n                                Label(\"I'm a disabled Label\").Disabled(),\r\n                                Label(\"I'm a required Label\").Required(),\r\n                                Label(\"A Label for An Input\").SetContent(TextBox())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "LayerSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class LayerSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public LayerSample()\r\n        {\r\n            var layer = Layer();\r\n            var layerHost = LayerHost();\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(LayerSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"A Layer is a technical component that does not have specific Design guidance.\"),\r\n                            TextBlock(\"Layers are used to render content outside of a DOM tree, at the end of the document. This allows content to escape traditional boundaries caused by \\\"overflow: hidden\\\" css rules and keeps it on the top without using z-index rules. This is useful for example in ContextualMenu and Tooltip scenarios, where the content should always overlay everything else.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Usage\"),\r\n                            TextBlock(\"Basic layered content\").Medium(),\r\n                            layer.Content(Stack().Horizontal().Children(TextBlock(\"This is example layer content.\"),Toggle(), Toggle(), Toggle())),\r\n                                Toggle(\"Toggle Component Layer\").OnChange((s, e) => layer.IsVisible = s.IsChecked),\r\n                                TextBlock(\"Using LayerHost to control projection\").Medium(),\r\n                                Toggle(\"Show on Host\").OnChange((s, e) => layer.Host = s.IsChecked ? layerHost : null),\r\n                                layerHost));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "LineAwesomeSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class LineAwesomeSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public LineAwesomeSample()\r\n        {\r\n            //TODO: Add dropwdown to select icon weight\r\n\r\n            var searchAsYouType = TextBlock(\"search for icons\");\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(LineAwesomeSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"Tesserae integrates the LineAwesome icons as part of the package, with an auto-generated strongly typed enum for them.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"TODO\")\r\n                ),\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Don't\"),\r\n                    SampleDont(\"TODO\")\r\n                )\r\n            )))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Usage:\"),\r\n                TextBlock($\"enum {nameof(LineAwesome)}:\").Medium(),\r\n                SearchableList(GetItems(40), 25.percent(), 25.percent(), 25.percent(), 25.percent()))).PaddingBottom(32.px()).MaxHeight(300.px());\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private IEnumerable<IconItem> GetItems(int count)\r\n        {\r\n            var names = Enum.GetNames(typeof(LineAwesome));\r\n            LineAwesome[] values = (LineAwesome[])Enum.GetValues(typeof(LineAwesome));\r\n\r\n            for (int i = 0; i < values.Length; i++)\r\n            {\r\n                yield return new IconItem(values[i], names[i]);\r\n            }\r\n        }\r\n\r\n        private class IconItem : ISearchableItem\r\n        {\r\n            private string _value;\r\n            private IComponent component;\r\n            public IconItem(LineAwesome icon, string name)\r\n            {\r\n                name = ToValidName(name.Substring(3));\r\n                _value = name + \" \" + icon.ToString();\r\n                component = Stack().Horizontal().Children(Icon(icon, size: TextSize.Medium).MinWidth(34.px()).AlignCenter(), TextBlock($\"{name}\").Title(icon.ToString()).Wrap().AlignCenter()).PaddingBottom(4.px());\r\n            }\r\n\r\n            public bool IsMatch(string searchTerm) => _value.Contains(searchTerm);\r\n\r\n            public IComponent Render() => component;\r\n        }\r\n\r\n\r\n        //Copy of the logic in the generator code, as we don't have the enum names anymore on  Enum.GetNames(typeof(LineAwesome))\r\n        private static string ToValidName(string icon)\r\n        {\r\n            var words = icon.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries)\r\n                            .Select(i => i.Substring(0, 1).ToUpper() + i.Substring(1))\r\n                            .ToArray();\r\n\r\n            var name = string.Join(\"\", words);\r\n            if (char.IsDigit(name[0]))\r\n            {\r\n                return \"_\" + name;\r\n            }\r\n            else\r\n            {\r\n                return name;\r\n            }\r\n        }\r\n    }\r\n}\r\n";
                case "ModalSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ModalSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ModalSample()\r\n        {\r\n            Modal(\"Lorem Ipsum\")\r\n                .Var(out var modal)\r\n                .LightDismiss()\r\n                .Width(60.vw())\r\n                .Height(60.vh())\r\n                .SetFooter(TextBlock(\"This is a footer note\").SemiBold().MediumPlus())\r\n                .Content(Stack().Children(\r\n                            TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas lorem nulla, malesuada ut sagittis sit amet, vulputate in leo. Maecenas vulputate congue sapien eu tincidunt. Etiam eu sem turpis. Fusce tempor sagittis nunc, ut interdum ipsum vestibulum non. Proin dolor elit, aliquam eget tincidunt non, vestibulum ut turpis. In hac habitasse platea dictumst. In a odio eget enim porttitor maximus. Aliquam nulla nibh, ullamcorper aliquam placerat eu, viverra et dui. Phasellus ex lectus, maximus in mollis ac, luctus vel eros. Vivamus ultrices, turpis sed malesuada gravida, eros ipsum venenatis elit, et volutpat eros dui et ante. Quisque ultricies mi nec leo ultricies mollis. Vivamus egestas volutpat lacinia. Quisque pharetra eleifend efficitur. \"),\r\n                            TextBlock(\"Mauris at nunc eget lectus lobortis facilisis et eget magna. Vestibulum venenatis augue sapien, rhoncus faucibus magna semper eget. Proin rutrum libero sagittis sapien aliquet auctor. Suspendisse tristique a magna at facilisis. Duis rhoncus feugiat magna in rutrum. Suspendisse semper, dolor et vestibulum lacinia, nunc felis malesuada ex, nec hendrerit justo ex et massa. Quisque quis mollis nulla. Nam commodo est ornare, rhoncus odio eu, pharetra tellus. Nunc sed velit mi.\"),\r\n                            TextBlock(\"Sed condimentum ultricies turpis convallis pharetra. Sed sagittis quam pharetra luctus porttitor. Cras vel consequat lectus. Sed nec fringilla urna, a aliquet libero. Aenean sed nisl purus. Vivamus vulputate felis et odio efficitur suscipit. Ut volutpat dictum lectus, ac rutrum massa accumsan at. Sed pharetra auctor finibus. In augue libero, commodo vitae nisi non, sagittis convallis ante. Phasellus malesuada eleifend mollis. Curabitur ultricies leo ac metus venenatis elementum.\"),\r\n                            TextBlock(\"Aenean egestas quam ut erat commodo blandit. Mauris ante nisl, pellentesque sed venenatis nec, aliquet sit amet enim. Praesent vitae diam non diam aliquet tristique non ut arcu. Pellentesque et ultrices eros. Fusce diam metus, mattis eu luctus nec, facilisis vel erat. Nam a lacus quis tellus gravida euismod. Nulla sed sem eget tortor cursus interdum. Sed vehicula tristique ultricies. Aenean libero purus, mollis quis massa quis, eleifend dictum massa. Fusce eu sapien sit amet odio lacinia placerat. Mauris varius risus sed aliquet cursus. Aenean lectus magna, tincidunt sit amet sodales a, volutpat ac leo. Morbi nisl sapien, tincidunt sit amet mauris quis, sollicitudin auctor est.\"),\r\n                            TextBlock(\"Nam id mi justo. Nam vehicula vulputate augue, ac pretium enim rutrum ultricies. Sed aliquet accumsan varius. Quisque ac auctor ligula. Fusce fringilla, odio et dignissim iaculis, est lacus ultrices risus, vitae condimentum enim urna eu nunc. In risus est, mattis non suscipit at, mattis ut ante. Maecenas consectetur urna vel erat maximus, non molestie massa consequat. Duis a feugiat nibh. Sed a hendrerit diam, a mattis est. In augue dolor, faucibus vel metus at, convallis rhoncus dui.\"),\r\n                            Toggle(\"Light Dismiss\").OnChange((s, e) => modal.CanLightDismiss = s.IsChecked).Checked(modal.CanLightDismiss),\r\n                            Toggle(\"Is draggable\").OnChange((s, e) => modal.IsDraggable = s.IsChecked).Checked(modal.IsDraggable),\r\n                            Toggle(\"Is dark overlay\").OnChange((s, e) => modal.IsDark = s.IsChecked).Checked(modal.IsDark),\r\n                            Toggle(\"Is non-blocking\").OnChange((s, e) => modal.IsNonBlocking = s.IsChecked).Checked(modal.IsNonBlocking),\r\n                            Toggle(\"Hide close button\").OnChange((s, e) => modal.ShowCloseButton = !s.IsChecked).Checked(!modal.ShowCloseButton),\r\n                            Label(\"Open a dialog from here\").Var(out var lbl).SetContent(Button(\"Open\").OnClick((s, e) => Dialog(\"Dialog over Modal\").Content(TextBlock(\"Hello World!\")).YesNo(() => lbl.Text = \"Yes\", () => lbl.Text = \"No\")))));\r\n\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(ModalSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Modals are temporary, modal UI overlay that generally provide contextual app information or require user confirmation/input, or can be used to advertise new app features. In some cases, Modals block interactions with the web page or application until being explicitly dismissed. They can be used for lightweight creation or edit tasks and simple management tasks, or for hosting heavier temporary content.\"),\r\n                            TextBlock(\"For usage requiring a quick choice from the user, Dialog may be a more appropriate control.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                            Stack().Horizontal().Children(\r\n                                Stack().Width(40.percent()).Children(\r\n                                    SampleSubTitle(\"Do\"),\r\n                                    SampleDo(\"Use Modals for actionable interactions, such as needing the user to provide information or change settings.\"),\r\n                                    SampleDo(\"When possible, try a non-blocking Modal before resorting to a blocking Modal.\"),\r\n                                    SampleDo(\"Always have at least one focusable element inside a Modal.\")),\r\n                            Stack().Width(40.percent()).Children(\r\n                                SampleSubTitle(\"Don't\"),\r\n                                SampleDont(\"Don’t overuse Modals. In some cases they can be perceived as interrupting workflow, and too many can be a bad user experience.\")))))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Usage\"),\r\n                            Button(\"Open Modal\").OnClick((s, e) => modal.Show()),\r\n                            Button(\"Open Modal from top right\").OnClick((s, e) => modal.ShowAt(fromRight: 16.px(), fromTop: 16.px())),\r\n                            Button(\"Open Modal with minimum size\").OnClick((s, e) => Modal().CenterContent().LightDismiss().Dark().Content(TextBlock(\"small content\").Tiny()).MinHeight(50.vh()).MinWidth(50.vw()).Show())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "OverflowSetSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class OverflowSetSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public OverflowSetSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(OverflowSetSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"Breadcrumbs should be used as a navigational aid in your app or site. They indicate the current page’s location within a hierarchy and help the user understand where they are in relation to the rest of that hierarchy. They also afford one-click access to higher levels of that hierarchy.\"),\r\n                TextBlock(\"Breadcrumbs are typically placed, in horizontal form, under the masthead or navigation of an experience, above the primary content area.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Place Breadcrumbs at the top of a page, above a list of items, or above the main content of a page.\")\r\n                    ),\r\n            Stack().Width(40.percent()).Children(\r\n                SampleSubTitle(\"Don't\"),\r\n                SampleDont(\"Don't use Breadcrumbs as a primary way to navigate an app or site.\")))))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Usage\"),\r\n                    Label(\"Selected: \").SetContent(TextBlock().Var(out var msg)),\r\n                    TextBlock(\"All Visible\").Medium(),\r\n                    OverflowSet().PaddingTop(16.px()).PaddingBottom(16.px()).Items(\r\n                        Button(\"Folder 1\").Link().OnClick((s,e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().OnClick((s, e) => msg.Text(\"Folder 2\")).Disabled(),\r\n                        Button(\"Folder 3\").Link().OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"All Visible, Small\").Medium(),\r\n                    OverflowSet().Small().PaddingTop(16.px()).PaddingBottom(16.px()).Items(\r\n                        Button(\"Folder 1\").Link().OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().OnClick((s, e) => msg.Text(\"Folder 2\")).Disabled(),\r\n                        Button(\"Folder 3\").Link().OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"Collapse 200px\").Medium(),\r\n                    OverflowSet().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(200.px()).Items(\r\n                        Button(\"Folder 1\").Link().SetIcon(\"las la-acorn\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().SetIcon(\"las la-corn\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Button(\"Folder 3\").Link().SetIcon(\"las la-bacon\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().SetIcon(\"las la-taco\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().SetIcon(\"las la-pie\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().SetIcon(\"las la-popcorn\").OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n                    ,\r\n\r\n                    TextBlock(\"Collapse 200px, Small\").Medium(),\r\n                    OverflowSet().PaddingTop(16.px()).PaddingBottom(16.px()).Small().MaxWidth(200.px()).Items(\r\n                        Button(\"Folder 1\").Link().SetIcon(\"las la-acorn\").OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().SetIcon(\"las la-corn\").OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Button(\"Folder 3\").Link().SetIcon(\"las la-bacon\").OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().SetIcon(\"las la-taco\").OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().SetIcon(\"las la-pie\").OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().SetIcon(\"las la-popcorn\").OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n                    ,\r\n                    TextBlock(\"Collapse 300px\").Medium(),\r\n                    OverflowSet().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(300.px()).Items(\r\n                        Button(\"Folder 1\").Link().OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Button(\"Folder 3\").Link().OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().OnClick((s, e) => msg.Text(\"Folder 6\"))),\r\n\r\n                    TextBlock(\"Collapse 300px, from second, custom chevron\").Medium(),\r\n                    OverflowSet().PaddingTop(16.px()).PaddingBottom(16.px()).MaxWidth(300.px()).SetOverflowIndex(1).Items(\r\n                        Button(\"Folder 1\").Link().OnClick((s, e) => msg.Text(\"Folder 1\")),\r\n                        Button(\"Folder 2\").Link().OnClick((s, e) => msg.Text(\"Folder 2\")),\r\n                        Button(\"Folder 3\").Link().OnClick((s, e) => msg.Text(\"Folder 3\")),\r\n                        Button(\"Folder 4\").Link().OnClick((s, e) => msg.Text(\"Folder 4\")),\r\n                        Button(\"Folder 5\").Link().OnClick((s, e) => msg.Text(\"Folder 5\")),\r\n                        Button(\"Folder 6\").Link().OnClick((s, e) => msg.Text(\"Folder 6\")))\r\n\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "PanelSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing Panel = Tesserae.Components.Panel;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class PanelSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public PanelSample()\r\n        {\r\n            var panel = Panel().LightDismiss();\r\n            panel.Content(\r\n                Stack().Children(\r\n                    TextBlock(\"Sample panel\").MediumPlus().SemiBold(),\r\n                    ChoiceGroup(\"Side:\").Options(\r\n                        Option(\"Far\").Selected().OnSelected((x, e) => panel.Side = Panel.PanelSide.Far),\r\n                        Option(\"Near\").OnSelected((x, e) => panel.Side = Panel.PanelSide.Near)\r\n                    ),\r\n                    Toggle(\"Light Dismiss\").OnChange((s, e) => panel.CanLightDismiss = s.IsChecked).Checked(panel.CanLightDismiss),\r\n                    ChoiceGroup(\"Size:\").Options(\r\n                        Option(\"Small\").Selected().OnSelected((x, e) => panel.Size = Panel.PanelSize.Small),\r\n                        Option(\"Medium\").OnSelected((x, e) => panel.Size = Panel.PanelSize.Medium),\r\n                        Option(\"Large\").OnSelected((x, e) => panel.Size = Panel.PanelSize.Large),\r\n                        Option(\"LargeFixed\").OnSelected((x, e) => panel.Size = Panel.PanelSize.LargeFixed),\r\n                        Option(\"ExtraLarge\").OnSelected((x, e) => panel.Size = Panel.PanelSize.ExtraLarge),\r\n                        Option(\"FullWidth\").OnSelected((x, e) => panel.Size = Panel.PanelSize.FullWidth)\r\n                    ),\r\n                    Toggle(\"Is non-blocking\").OnChange((s, e) => panel.IsNonBlocking = s.IsChecked).Checked(panel.IsNonBlocking),\r\n                    Toggle(\"Is dark overlay\").OnChange((s, e) => panel.IsDark = s.IsChecked).Checked(panel.IsDark),\r\n                    Toggle(\"Hide close button\").OnChange((s, e) => panel.ShowCloseButton = !s.IsChecked).Checked(!panel.ShowCloseButton)\r\n                    )).SetFooter(Stack().Horizontal().Children(Button(\"Footer Button 1\").Primary(), Button(\"Footer Button 2\")));\r\n\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(PanelSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Panels are modal UI overlays that provide contextual app information. They often request some kind of creation or management action from the user. Panels are paired with the Overlay component, also known as a Light Dismiss. The Overlay blocks interactions with the app view until dismissed either through clicking or tapping on the Overlay or by selecting a close or completion action within the Panel.\"),\r\n                            SampleSubTitle(\"Examples of experiences that use Panels\"),\r\n                            TextBlock(\"Member or group list creation or management\"),\r\n                            TextBlock(\"Document list creation or management\"),\r\n                            TextBlock(\"Permissions creation or management\"),\r\n                            TextBlock(\"Settings creation or management\"),\r\n                            TextBlock(\"Multi-field forms\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                            Stack().Horizontal().Children(\r\n                            Stack().Width(40.percent()).Children(\r\n                                SampleSubTitle(\"Do\"),\r\n                                SampleDo(\"Use for self-contained experiences where the user does not need to interact with the app view to complete the task.\"),\r\n                                SampleDo(\"Use for complex creation, edit or management experiences.\"),\r\n                                SampleDo(\"Consider how the panel and its contained contents will scale across Fabric’s responsive web breakpoints.\")\r\n                        ),\r\n                        Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"Don't use for experiences where the user needs to interact with the app view.\")))))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Usage\"),\r\n                            Button(\"Open panel\").OnClick((s, e) => panel.Show())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "PickerSample": return "using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class PickerSample : IComponent\r\n    {\r\n        private readonly IComponent _content;\r\n\r\n        public PickerSample()\r\n        {\r\n            _content =\r\n                SectionStack()\r\n                    .Title(SampleHeader(nameof(PickerSample)))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Overview\"),\r\n                                TextBlock(\"Pickers are used to pick recipients.\")))\r\n                    .Section(\r\n                        Stack()\r\n                            .Width(40.percent())\r\n                            .Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Picker with text suggestions and tag-like selections\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                Picker<PickerSampleItem>(suggestionsTitleText: \"Suggested Tags\").WithItems(GetPickerItems())\r\n                                    .PaddingBottom(32.px()),\r\n                                TextBlock(\"Picker with single selection\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                Picker<PickerSampleItem>(suggestionsTitleText: \"Suggested Tags\", maximumAllowedSelections:1).WithItems(GetPickerItems())\r\n                                    .PaddingBottom(32.px()),\r\n                                TextBlock(\"Picker with icon and text suggestions and component based selections\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                Picker<PickerSampleItemWithComponents>(suggestionsTitleText: \"Suggested Items\", renderSelectionsInline: false).WithItems(GetComponentPickerItems())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private PickerSampleItem[] GetPickerItems()\r\n        {\r\n            return new []\r\n            {\r\n                new PickerSampleItem(\"Bob\"),\r\n                new PickerSampleItem(\"BOB\"),\r\n                new PickerSampleItem(\"Donuts by J Dilla\"),\r\n                new PickerSampleItem(\"Donuts\"),\r\n                new PickerSampleItem(\"Coffee\"),\r\n                new PickerSampleItem(\"Chicken Coop\"),\r\n                new PickerSampleItem(\"Cherry Pie\"),\r\n                new PickerSampleItem(\"Chess\"),\r\n                new PickerSampleItem(\"Cooper\")\r\n            };\r\n        }\r\n\r\n        private PickerSampleItemWithComponents[] GetComponentPickerItems()\r\n        {\r\n            return new []\r\n            {\r\n                new PickerSampleItemWithComponents(\"Bob\", LineAwesome.Bomb),\r\n                new PickerSampleItemWithComponents(\"BOB\", LineAwesome.Blender),\r\n                new PickerSampleItemWithComponents(\"Donuts by J Dilla\", LineAwesome.Carrot),\r\n                new PickerSampleItemWithComponents(\"Donuts\", LineAwesome.CarBattery),\r\n                new PickerSampleItemWithComponents(\"Coffee\", LineAwesome.Coffee),\r\n                new PickerSampleItemWithComponents(\"Chicken Coop\", LineAwesome.Hamburger),\r\n                new PickerSampleItemWithComponents(\"Cherry Pie\", LineAwesome.ChartPie),\r\n                new PickerSampleItemWithComponents(\"Chess\", LineAwesome.Chess),\r\n                new PickerSampleItemWithComponents(\"Cooper\", LineAwesome.QuestionCircle)\r\n            };\r\n        }\r\n    }\r\n\r\n    public class PickerSampleItem : IPickerItem\r\n    {\r\n        public PickerSampleItem(string name)\r\n        {\r\n            Name = name;\r\n        }\r\n\r\n        public string Name { get; }\r\n\r\n        public bool IsSelected { get; set; }\r\n\r\n        public IComponent Render()\r\n        {\r\n            return TextBlock(Name);\r\n        }\r\n    }\r\n\r\n    public class PickerSampleItemWithComponents : IPickerItem\r\n    {\r\n        private LineAwesome _icon;\r\n\r\n        public PickerSampleItemWithComponents(string name, LineAwesome icon)\r\n        {\r\n            Name = name;\r\n            _icon = icon;\r\n        }\r\n\r\n        public string Name { get; }\r\n\r\n        public bool IsSelected { get; set; }\r\n\r\n        public IComponent Render()\r\n        {\r\n            return Stack().Horizontal().AlignContent(ItemAlign.Center).Children(Icon(_icon).MinWidth(16.px()), TextBlock(Name));\r\n        }\r\n    }\r\n}\r\n";
                case "PivotSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class PivotSample : IComponent\r\n    {\r\n        private IComponent content;\r\n\r\n        public PivotSample()\r\n        {\r\n            content = SectionStack()\r\n                .Title(SampleHeader(nameof(PivotSample)))\r\n                .Section(Stack().Children(\r\n                                       SampleTitle(\"Overview\"),\r\n                                       TextBlock(\"TODO\"),\r\n                                       TextBlock(\"Examples of experiences that use Panels\").MediumPlus()))\r\n                .Section(Stack().Children(\r\n                                       SampleTitle(\"Best Practices\"),\r\n                                       Stack().Horizontal().Children(\r\n                                           Stack().Width(40.percent()).Children(\r\n                                               SampleSubTitle(\"Do\"),\r\n                                               SampleDo(\"TODO\")\r\n                                           ),\r\n                                           Stack().Width(40.percent()).Children(\r\n                                               SampleSubTitle(\"Don't\"),\r\n                                               SampleDont(\"TODO\")\r\n                                           )\r\n                                       )))\r\n                .Section(Stack().Children(\r\n                                       SampleTitle(\"Usage\"),\r\n                                       SampleSubTitle(\"Cached vs. Not Cached Tabs\"),\r\n                                           Pivot().Pivot(\"tab1\", () => Button().SetText(\"Cached\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                                 () => TextBlock(DateTimeOffset.UtcNow.ToString()).MediumPlus(), cached: true)\r\n                                                  .Pivot(\"tab2\", () => Button().SetText(\"Not Cached\").SetIcon(\"las la-sync\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                                 () => TextBlock(DateTimeOffset.UtcNow.ToString()).MediumPlus(), cached: false),\r\n                                                                                  SampleSubTitle(\"Cached vs. Not Cached Tabs\"),\r\n                                       SampleSubTitle(\"Scroll with limited height\"),\r\n                                       Pivot().MaxHeight(500.px())\r\n                                              .Pivot(\"tab1\", () => Button().SetText(\"5 Items\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                             () => ItemsList(GetSomeItems(5)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab2\", () => Button().SetText(\"10 Items\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                             () => ItemsList(GetSomeItems(20)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab3\", () => Button().SetText(\"50 Items\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                             () => ItemsList(GetSomeItems(50)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab4\", () => Button().SetText(\"100 Items\").NoBorder().NoBackground().MediumPlus().Regular(),\r\n                                                             () => ItemsList(GetSomeItems(100)).PaddingBottom(16.px()), cached: true),\r\n                                       SampleSubTitle(\"Too many tabs (WIP)\"),\r\n                                       Pivot().MaxHeight(500.px()).MaxWidth(300.px())\r\n                                              .Pivot(\"tab1\", () => Button().SetText(\"5 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(5)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab2\", () => Button().SetText(\"10 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(20)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab3\", () => Button().SetText(\"50 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(50)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab4\", () => Button().SetText(\"100 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(100)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab5\", () => Button().SetText(\"5 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(5)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab6\", () => Button().SetText(\"10 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(20)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab7\", () => Button().SetText(\"50 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(50)).PaddingBottom(16.px()), cached: true)\r\n                                              .Pivot(\"tab8\", () => Button().SetText(\"100 Items\").NoBorder().NoBackground().MediumPlus().Regular().Wrap(),\r\n                                                             () => ItemsList(GetSomeItems(100)).PaddingBottom(16.px()), cached: true)\r\n                                       ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return content.Render();\r\n        }\r\n\r\n        private IEnumerable<IComponent> GetSomeItems(int count)\r\n        {\r\n            return Enumerable\r\n                .Range(1, count)\r\n                .Select(number => Card(TextBlock($\"Lorem Ipsum {number}\").NonSelectable()).MinWidth(200.px()));\r\n        }\r\n    }\r\n}\r\n";
                case "ProgressIndicatorSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ProgressIndicatorSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ProgressIndicatorSample()\r\n        {\r\n            _content = SectionStack()\r\n                .Title(SampleHeader(nameof(ProgressIndicatorSample)))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Overview\"),\r\n                    TextBlock(\r\n                        \"ProgressIndicators are used to show the completion status of an operation lasting more than 2 seconds. If the state of progress cannot be determined, use a Spinner instead. ProgressIndicators can appear in a new panel, a flyout, under the UI initiating the operation, or even replacing the initiating UI, as long as the UI can return if the operation is canceled or is stopped.\"))\r\n                )\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Best Practices\"),\r\n                    Stack().Horizontal().Children(\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Do\"),\r\n                            SampleDo(\"Use a ProgressIndicator when the total units to completion is known\"),\r\n                            SampleDo(\"Display operation description\"),\r\n                            SampleDo(\"Show text above and/or below the bar\"),\r\n                            SampleDo(\"Combine steps of a single operation into one bar\")\r\n                        ),\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"Use a ProgressIndicator when the total units to completion is indeterminate.\"),\r\n                            SampleDont(\"Show text to the right or left of the bar\"),\r\n                            SampleDont(\"Cause progress to “rewind” to show new steps\")\r\n                        ))\r\n                ))\r\n                .Section(\r\n                    Stack().Children(\r\n                        SampleTitle(\"Usage\"),\r\n                        TextBlock(\"States\").Medium(),\r\n                        Label(\"Empty\").SetContent(ProgressIndicator().Progress(0).Width(400.px())).AlignCenter(),\r\n                        Label(\"30%\").SetContent(ProgressIndicator().Progress(30).Width(400.px())).AlignCenter(),\r\n                        Label(\"60%\").SetContent(ProgressIndicator().Progress(60).Width(400.px())).AlignCenter(),\r\n                        Label(\"Full\").SetContent(ProgressIndicator().Progress(100).Width(400.px())).AlignCenter(),\r\n                        Label(\"Indeterminate\").SetContent(ProgressIndicator().Indeterminated().Width(400.px())).AlignCenter()\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ProgressModalSample": return "using System;\r\nusing System.Threading.Tasks;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ProgressModalSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ProgressModalSample()\r\n        {\r\n            var modal = ProgressModal().Title(\"Lorem Ipsum\");\r\n\r\n            float progress = 0;\r\n\r\n            void ProgressFrame(object a)\r\n            {\r\n                progress++;\r\n\r\n                if (progress < 100)\r\n                {\r\n                    modal.Message($\"Processing {progress}%\").Progress(progress);\r\n                    window.setTimeout(ProgressFrame, 16);\r\n                }\r\n                else\r\n                {\r\n                    modal.Message(\"Finishing...\").ProgressIndeterminated();\r\n                    Task.Delay(5000).ContinueWith(_ => modal.Hide()).FireAndForget();\r\n                }\r\n            }\r\n\r\n            async Task PlayModal()\r\n            {\r\n                progress = 0;\r\n                modal.Message(\"Preparing to process...\").ProgressSpin().Show();\r\n                await Task.Delay(1500);\r\n                window.setTimeout(ProgressFrame, 16);\r\n            }\r\n\r\n            _content = SectionStack()\r\n                .Title(SampleHeader(nameof(ProgressModalSample)))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Overview\"),\r\n                    TextBlock(\r\n                        \"TODO\"))\r\n                )\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Best Practices\"),\r\n                    Stack().Horizontal().Children(\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Do\"),\r\n                            SampleDo(\"TODO\")\r\n                        ),\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"TODO\")\r\n                        ))\r\n                ))\r\n                .Section(\r\n                    Stack().Width(400.px()).Children(\r\n                        SampleTitle(\"Usage\"),\r\n                        Button(\"Open Modal\").OnClick((s, e) => PlayModal().FireAndForget())\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "SearchableListSample": return "using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Tesserae.Components;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing static Tesserae.UI;\r\nusing static Retyped.dom;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class SearchableListSample : IComponent\r\n    {\r\n        private readonly IComponent _content;\r\n\r\n        public SearchableListSample()\r\n        {\r\n            _content =\r\n                SectionStack()\r\n                    .WidthStretch()\r\n                    .Title(SampleHeader(nameof(SearchableListSample)))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Overview\"),\r\n                                TextBlock(\"This list provides a base component for implementing search over a known number of items.\" +\r\n                                          \"It is agnostic of the tile component used, and selection \" +\r\n                                          \"management. These concerns can be layered separately.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"You need to implement ISearchableItem interface on the items, and specially the IsMatch method to enable searching on them\")))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Searchable List with No Results Message\").Medium().PaddingBottom(16.px()).PaddingTop(16.px()),\r\n                                SearchableList(GetItems(10)).PaddingBottom(32.px()).Height(500.px())\r\n                                    .WithNoResultsMessage(() => BackgroundArea(Card(TextBlock(\"No Results\").Padding(16.px()))).WidthStretch().HeightStretch().MinHeight(100.px())),\r\n                                TextBlock(\"Searchable List with Columns\").Medium().PaddingBottom(16.px()).PaddingTop(16.px()),\r\n                                SearchableList(GetItems(40), 25.percent(), 25.percent(), 25.percent(), 25.percent()).Height(500.px())\r\n                                )).PaddingBottom(32.px());\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private IEnumerable<SearchableListItem> GetItems(int count)\r\n        {\r\n            return Enumerable\r\n                .Range(1, count)\r\n                .Select(number => new SearchableListItem($\"Lorem Ipsum {number}\"));\r\n        }\r\n\r\n        private class SearchableListItem : ISearchableItem\r\n        {\r\n            private string _value;\r\n            private IComponent _component;\r\n            public SearchableListItem(string value)\r\n            {\r\n                _value = value;\r\n                _component = Card(TextBlock(value).NonSelectable());\r\n            }\r\n\r\n            public bool IsMatch(string searchTerm) => _value.Contains(searchTerm);\r\n\r\n            public HTMLElement Render() => _component.Render();\r\n\r\n            IComponent ISearchableItem.Render() => _component;\r\n        }\r\n    }\r\n}\r\n";
                case "SearchBoxSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class SearchBoxSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public SearchBoxSample()\r\n        {\r\n            var searchAsYouType = TextBlock(\"start typing\");\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(SearchBoxSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"SearchBoxes provide an input field for searching through content, allowing users to locate specific items within the website or app.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Use placeholder text in the SearchBox to describe what users can search for.\"),\r\n                    SampleDo(\"Example: 'Search'; 'Search files'; 'Search site'\"),\r\n                    SampleDo(\"Once the user has clicked into the SearchBox but hasn’t entered input yet, use 'hint text' to communicate search scope.\"),\r\n                    SampleDo(\"Examples: 'Try searching for a PDFs'; 'Search contacts list'; 'Type to find <content type> '\"),\r\n                    SampleDo(\"Use the Underlined SearchBox for CommandBars.\")\r\n                ),\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Don't\"),\r\n                    SampleDont(\"Don't leave the SearchBox blank because it's too ambiguous.\"),\r\n                    SampleDont(\"Don't have lengthy and unclear hint text. It should be used to clasify and set expectations.\"),\r\n                    SampleDont(\"Don't provide inaccurate matches or bad predictions, as it will make search seem unreliable and will result in user frustration.\"),\r\n                    SampleDont(\"Don’t provide too much information or metadata in the suggestions list; it’s intended to be lightweight.\"),\r\n                    SampleDont(\"Don't build a custom search control based on the default text box or any other control.\"),\r\n                    SampleDont(\"Don't use SearchBox if you cannot reliably provide accurate results.\")\r\n                )\r\n            )))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Usage\"),\r\n                TextBlock(\"Basic TextBox\").Medium(),\r\n                Stack().Width(40.percent()).Children(\r\n                    Label(\"Default\").SetContent(SearchBox(\"Search\").OnSearch((s,e) => alert($\"Searched for {e}\"))),\r\n                    Label(\"Disabled\").Disabled().SetContent(SearchBox(\"Search\").Disabled()),\r\n                    Label(\"Underline\").SetContent(SearchBox(\"Search\").Underlined().OnSearch((s, e) => alert($\"Searched for {e}\"))),\r\n                    Label(\"Search as you type\").SetContent(SearchBox(\"Search\").Underlined().SearchAsYouType().OnSearch((s, e) => searchAsYouType.Text = $\"Searched for {e}\")),\r\n                    searchAsYouType,\r\n                    Label(\"Custom Icon\").Required().SetContent(SearchBox(\"Filter\").SetIcon(\"las la-filter\").OnSearch((s, e) => alert($\"Filter for {e}\"))),\r\n                    Label(\"No Icon\").SetContent(SearchBox(\"Search\").NoIcon().OnSearch((s, e) => alert($\"Searched for {e}\"))),\r\n                    Label(\"Fixed Width\").Required().SetContent(SearchBox(\"Small Search\").Width(200.px()).OnSearch((s, e) => alert($\"Searched for {e}\"))))));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "SectionStackSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class SectionStackSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public SectionStackSample()\r\n        {\r\n            var stack = SectionStack();\r\n\r\n            _content = Stack().Children(SectionStack().Title(SampleHeader(nameof(SectionStackSample)))\r\n                                            .Section(Stack().Children(\r\n                                                    SampleTitle(\"Overview\"),\r\n                                                    TextBlock(\"A Session Stack is a container-type component that abstracts the implementation of a flexbox in order to define the layout of its children components.\")))\r\n                                            .Section(Stack().Children(\r\n                                                    SampleTitle(\"Usage\"),\r\n                                                    Label(\"Number of items:\").SetContent(Slider(5, 0, 10, 1).OnInput((s, e) => SetChildren(stack, s.Value))))),\r\n                                        stack);\r\n            SetChildren(stack, 5);\r\n        }\r\n\r\n        private void SetChildren(SectionStack stack, int count)\r\n        {\r\n            stack.Clear();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                stack.Section(Stack().Children(\r\n                TextBlock($\"Section {i}\").MediumPlus().SemiBold(),\r\n                TextBlock(\"Wrap (Default)\").SmallPlus(),\r\n                TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").Width(50.percent()),\r\n                TextBlock(\"No Wrap\").SmallPlus(),\r\n                TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").NoWrap().Width(50.percent())\r\n                ));\r\n            }\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "SpinnerSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class SpinnerSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public SpinnerSample()\r\n        {\r\n            _content = SectionStack()\r\n                .Title(SampleHeader(nameof(SpinnerSample)))\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Overview\"),\r\n                    TextBlock(\r\n                        \"A Spinner is an outline of a circle which animates around itself indicating to the user that things are processing. A Spinner is shown when it's unsure how long a task will take making it the indeterminate version of a ProgressIndicator. They can be various sizes, located inline with content or centered. They generally appear after an action is being processed or committed. They are subtle and generally do not take up much space, but are transitions from the completed task.\"))\r\n                )\r\n                .Section(Stack().Children(\r\n                    SampleTitle(\"Best Practices\"),\r\n                    Stack().Horizontal().Children(\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Do\"),\r\n                            SampleDo(\"Use a Spinner when a task is not immediate.\"),\r\n                            SampleDo(\"Use one Spinner at a time.\"),\r\n                            SampleDo(\"Descriptive verbs are appropriate under a Spinner to help the user understand what's happening. Ie: Saving, processing, updating.\"),\r\n                            SampleDo(\"Use a Spinner when confirming a change has been made or a task is being processed.\")\r\n                        ),\r\n                        Stack().Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"Don’t use a Spinner when performing immediate tasks.\"),\r\n                            SampleDont(\"Don't show multiple Spinners at the same time.\"),\r\n                            SampleDont(\"Don't include more than a few words when paired with a Spinner.\")\r\n                        ))\r\n                ))\r\n                .Section(\r\n                    Stack().Width(400.px()).Children(\r\n                        SampleTitle(\"Usage\"),\r\n                        TextBlock(\"Spinner sizes\").Medium(),\r\n                        Label(\"Extra small spinner\").SetContent(Spinner().XSmall()).AlignCenter(),\r\n                        Label(\"Small spinner\").SetContent(Spinner().Small()).AlignCenter(),\r\n                        Label(\"Medium spinner\").SetContent(Spinner().Medium()).AlignCenter(),\r\n                        Label(\"Large spinner\").SetContent(Spinner().Large()).AlignCenter()\r\n                    ))\r\n                .Section(\r\n                    Stack().Width(400.px()).Children(\r\n                        TextBlock(\"Spinner label positioning\").Medium(),\r\n                        Label(\"Spinner with label positioned below\").SetContent(Spinner(\"I am definitely loading...\").Below()),\r\n                        Label(\"Spinner with label positioned above\").SetContent(Spinner(\"Seriously, still loading...\").Above()),\r\n                        Label(\"Spinner with label positioned to right\").SetContent(Spinner(\"Wait, wait...\").Right()),\r\n                        Label(\"Spinner with label positioned to left\").SetContent(Spinner(\"Nope, still loading...\").Left())\r\n                    ));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "StackSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class StackSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public StackSample()\r\n        {\r\n            var stack = Stack();\r\n            var countSlider = Slider(5, 0, 10, 1);\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(StackSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"A Stack is a container-type component that abstracts the implementation of a flexbox in order to define the layout of its children components.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Usage\"),\r\n                Stack().Children(\r\n                    Stack().Horizontal().Children(\r\n                    Stack().Children(\r\n                    Label(\"Number of items:\").SetContent(countSlider.OnInput((s, e) => SetChildren(stack, s.Value))),\r\n                    Stack().Horizontal().Children(\r\n                    ChoiceGroup(\"Orientation:\").Horizontal().Options(Option(\"Vertical\").Selected(), Option(\"Horizontal\"), Option(\"Vertical Reverse\"), Option(\"Horizontal Reverse\")).OnChange(\r\n                        (s, e) =>\r\n                        {\r\n                            if (s.SelectedOption.Text == \"Horizontal\")\r\n                                stack.Horizontal();\r\n                            else if (s.SelectedOption.Text == \"Vertical\")\r\n                                stack.Vertical();\r\n                            else if (s.SelectedOption.Text == \"Horizontal Reverse\")\r\n                                stack.HorizontalReverse();\r\n                            else if (s.SelectedOption.Text == \"Vertical Reverse\")\r\n                                stack.VerticalReverse();\r\n                        })\r\n                    )\r\n                    )\r\n                ),\r\n                stack.HeightAuto())));\r\n                SetChildren(stack, 5);\r\n        }\r\n\r\n        private void SetChildren(Stack stack, int count)\r\n        {\r\n            stack.Clear();\r\n            for (int i = 0; i < count; i++)\r\n            {\r\n                stack.Add(Button(i.ToString()));\r\n            }\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "TextBlockSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class TextBlockSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public TextBlockSample()\r\n        {\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(TextBlockSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Text is a component for displaying text. You can use Text to standardize text across your web app.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Usage\"),\r\n                            TextBlock(\"TextBox Ramp Example\").Medium(),\r\n                            Stack().Horizontal().Children(TextBlock(\"Variant\").Width(200.px()).SemiBold(), TextBlock(\"Example\").SemiBold()),\r\n                            Stack().Horizontal().Children(TextBlock(\"tiny\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").Tiny()),\r\n                            Stack().Horizontal().Children(TextBlock(\"xSmall\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").XSmall()),\r\n                            Stack().Horizontal().Children(TextBlock(\"small\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").Small()),\r\n                            Stack().Horizontal().Children(TextBlock(\"smallPlus\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").SmallPlus()),\r\n                            Stack().Horizontal().Children(TextBlock(\"medium\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").Medium()),\r\n                            Stack().Horizontal().Children(TextBlock(\"mediumPlus\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").MediumPlus()),\r\n                            Stack().Horizontal().Children(TextBlock(\"large\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").Large()),\r\n                            Stack().Horizontal().Children(TextBlock(\"xLarge\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").XLarge()),\r\n                            Stack().Horizontal().Children(TextBlock(\"xxLarge\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").XXLarge()),\r\n                            Stack().Horizontal().Children(TextBlock(\"mega\").Width(200.px()), TextBlock(\"The quick brown fox jumped over the lazy dog.\").Mega()),\r\n                            TextBlock(\"TextBox Wrap Example\").Medium(),\r\n                            TextBlock(\"Wrap (Default)\").SmallPlus(),\r\n                            TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").Width(50.percent()),\r\n                            TextBlock(\"No Wrap\").SmallPlus(),\r\n                            TextBlock(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\").NoWrap().Width(50.percent())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "TextBoxSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class TextBoxSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public TextBoxSample()\r\n        {\r\n            _content = SectionStack()\r\n            .Title(SampleHeader(nameof(TextBoxSample)))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Overview\"),\r\n                TextBlock(\"The TextBox component enables a user to type text into an app. The text displays on the screen in a simple, uniform format.\")))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Best Practices\"),\r\n                Stack().Horizontal().Children(\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Do\"),\r\n                    SampleDo(\"Use the TextBox to accept data input on a form or page.\"),\r\n                    SampleDo(\"Label the TextBox with a helpful name.\"),\r\n                    SampleDo(\"Provide concise helper text that specifies what content is expected to be entered.\"),\r\n                    SampleDo(\"When part of a form, provide clear designations for which TextBox are required vs. optional.\"),\r\n                    SampleDo(\"Provide all appropriate methods for submitting provided data (e.g. dedicated ‘Submit’ button).\"),\r\n                    SampleDo(\"Provide all appropriate methods of clearing provided data (‘X’ or something similar).\"),\r\n                    SampleDo(\"Allow for selection, copy and paste of field data.\"),\r\n                    SampleDo(\"Ensure that the TextBox is functional through use of mouse/keyboard or touch when available.\")\r\n                ),\r\n                Stack().Width(40.percent()).Children(\r\n                    SampleSubTitle(\"Don't\"),\r\n                    SampleDont(\"Don't use a TextBox to render basic copy as part of a body element of a page.\"),\r\n                    SampleDont(\"Don't provide an unlabeled TextBox and expect that users will know what to do with it.\"),\r\n                    SampleDont(\"Don't place a TextBox inline with body copy.\"),\r\n                    SampleDont(\"Don't be overly verbose with helper text.\"),\r\n                    SampleDont(\"Don't occlude the entry or allow entry when the active content is not visible.\")\r\n                )\r\n            )))\r\n            .Section(Stack().Children(\r\n                SampleTitle(\"Usage\"),\r\n                TextBlock(\"Basic TextBox\").Medium(),\r\n                Stack().Width(40.percent()).Children(\r\n                    Label(\"Standard\").SetContent(TextBox()),\r\n                    Label(\"Disabled\").Disabled().SetContent(TextBox(\"I am disabled\").Disabled()),\r\n                    Label(\"Read-only\").SetContent(TextBox(\"I am read-only\").ReadOnly()),\r\n                    Label(\"Password\").SetContent(TextBox(\"I am a password box\").Password()),\r\n                    Label(\"Required\").Required().SetContent(TextBox(\"\")),\r\n                    TextBox(\"\").Required(),\r\n                    Label(\"With error message\").SetContent(TextBox().Error(\"Error message\").IsInvalid()),\r\n                    Label(\"With placeholder\").SetContent(TextBox().SetPlaceholder(\"Please enter text here\")),\r\n                    Label(\"With validation\").SetContent(TextBox().Validation((tb) => tb.Text.Length == 0 ? \"Empty\" : null)),\r\n                    Label(\"With validation on type\").SetContent(TextBox().Validation(Validation.NonZeroPositiveInteger)),\r\n                    Label(\"Disabled with placeholder\").Disabled().SetContent(TextBox().SetPlaceholder(\"I am disabled\").Disabled()))));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ToastSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ToastSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ToastSample()\r\n        {\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(ToastSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Toasts are used for short-lived notifications to users.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Stack().Children(\r\n                                        SampleSubTitle(\"Do\"),\r\n                                        SampleDo(\"Write short and recognizable messages\"),\r\n                                        SampleDo(\"Keep toasts long enough to be read, but not long enough to bother\")),\r\n                                    Stack().Children(\r\n                                        SampleSubTitle(\"Don't\"),\r\n                                        SampleDont(\"Overload users with toasts.\")))))\r\n                        .Section(\r\n                            Stack().Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                SampleSubTitle(\"Toasts top-right (default)\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().Information(\"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().Success(\"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().Warning(\"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().Error(\"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts top left\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().TopLeft().Information(\"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().TopLeft().Success(\"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().TopLeft().Warning(\"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().TopLeft().Error(\"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts bottom right\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().BottomRight().Information(\"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().BottomRight().Success(\"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().BottomRight().Warning(\"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().BottomRight().Error(\"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts bottom left\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().BottomLeft().Information(\"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().BottomLeft().Success(\"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().BottomLeft().Warning(\"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().BottomLeft().Error(\"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts top center with title\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().TopCenter().Information(\"This is a title\", \"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().TopCenter().Success(\"This is a title\", \"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().TopCenter().Warning(\"This is a title\", \"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().TopCenter().Error(\"This is a title\", \"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts top full with title\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().TopFull().Information(\"This is a title\", \"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().TopFull().Success(\"This is a title\", \"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().TopFull().Warning(\"This is a title\", \"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().TopFull().Error(\"This is a title\", \"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts bottom center with title\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().BottomCenter().Information(\"This is a title\", \"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().BottomCenter().Success(\"This is a title\", \"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().BottomCenter().Warning(\"This is a title\", \"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().BottomCenter().Error(\"This is a title\", \"Error!\"))),\r\n\r\n                                SampleSubTitle(\"Toasts bottom full with title\"),\r\n                                Stack().Horizontal().Children(\r\n                                    Button().SetText(\"Info\").OnClick((s, e) => Toast().BottomFull().Information(\"This is a title\", \"Info!\")),\r\n                                    Button().SetText(\"Success\").OnClick((s, e) => Toast().BottomFull().Success(\"This is a title\", \"Success!\")),\r\n                                    Button().SetText(\"Warning\").OnClick((s, e) => Toast().BottomFull().Warning(\"This is a title\", \"Warning!\")),\r\n                                    Button().SetText(\"Error\").OnClick((s, e) => Toast().BottomFull().Error(\"This is a title\", \"Error!\")))));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ToggleSample": return "using System;\r\nusing Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ToggleSample : IComponent\r\n    {\r\n        private IComponent _content;\r\n\r\n        public ToggleSample()\r\n        {\r\n            _content = SectionStack()\r\n                        .Title(SampleHeader(nameof(ToggleSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"Toggles represent a physical switch that allows users to turn things on or off. Use Toggles to present users with two mutually exclusive options (like on/off), where choosing an option results in an immediate action. Use a Toggle for binary operations that take effect right after the user flips the Toggle. For example, use a Toggle to turn services or hardware components on or off. In other words, if a physical switch would work for the action, a Toggle is probably the best control to use.\"),\r\n                            TextBlock(\"Choosing between Toggle and Checkbox\").Medium(),\r\n                            TextBlock(\"For some actions, either a Toggle or a Checkbox might work. To decide which control would work better, follow these tips:\"),\r\n                            TextBlock(\"Use a Toggle for binary settings when changes become effective immediately after the user changes them.\"),\r\n                            TextBlock(\"In the above example, it's clear with the Toggle that the wireless is set to \\\"On.\\\" But with the Checkbox, the user needs to think about whether the wireless is on now or whether they need to check the box to turn wireless on.\"),\r\n                            TextBlock(\"Use a Checkbox when the user has to perform extra steps for changes to be effective. For example, if the user must click a \\\"Submit\\\", \\\"Next\\\", \\\"Ok\\\" button to apply changes, use a Checkbox.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                            Stack().Horizontal().Children(\r\n                            Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Do\"),\r\n                            SampleDo(\"Only replace the On and Off labels if there are more specific labels for the setting. If there are short (3-4 characters) labels that represent binary opposites that are more appropriate for a particular setting, use them. \")\r\n                        ),\r\n                        Stack().Width(40.percent()).Children(\r\n                            SampleSubTitle(\"Don't\"),\r\n                            SampleDont(\"Don’t use a Toggle if the user will have to do something else or go somewhere else in order to experience its effect. If any extra step is required for changes to be effective, you should use a checkbox and corresponding \\\"Apply\\\" button instead of a Toggle.\")\r\n                        )\r\n                        )))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Usage\"),\r\n                            TextBlock(\"Basic Toggles\").Medium(),\r\n                            Label(\"Enabled and checked\").SetContent(Toggle().Checked()),\r\n                            Label(\"Enabled and unchecked\").SetContent(Toggle()),\r\n                            Label(\"Disabled and checked\").SetContent(Toggle().Checked().Disabled()),\r\n                            Label(\"Disabled and unchecked\").SetContent(Toggle().Disabled()),\r\n                            Label(\"With inline label\").Inline().SetContent(Toggle()),\r\n                            Label(\"Disabled with inline label\").Inline().SetContent(Toggle().Disabled()).Disabled(),\r\n                            Toggle(\"With inline label and without onText and offText\"),\r\n                            Toggle(\"Disabled with inline label and without onText and offText\").Disabled()));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "ValidatorSample": return "using Tesserae.Components;\r\nusing static Retyped.dom;\r\nusing static Tesserae.UI;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class ValidatorSample : IComponent\r\n    {\r\n        private IComponent content;\r\n\r\n        public ValidatorSample()\r\n        {\r\n            var isAllValid = TextBlock(\"?\");\r\n            var validator = Validator().OnValidation((valid) => isAllValid.Text = valid ? \"Valid ✔\" : \"Invalid ❌\");\r\n\r\n            var tb1 = TextBox();\r\n            var tb2 = TextBox();\r\n            tb1.Validation((tb) => tb.Text.Length == 0 ? \"Empty\" : ((tb1.Text == tb2.Text) ? \"Duplicated  values\" : null), validator);\r\n            tb2.Validation((tb) => Validation.NonZeroPositiveInteger(tb) ?? ((tb1.Text == tb2.Text) ? \"Duplicated values\" : null), validator);\r\n\r\n            content = SectionStack()\r\n                        .Title(SampleHeader(nameof(ValidatorSample)))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Overview\"),\r\n                            TextBlock(\"The validator helper allows you to capture the state of multiple components registered on it.\")))\r\n                        .Section(Stack().Children(\r\n                            SampleTitle(\"Best Practices\"),\r\n                            Stack().Horizontal().Children(\r\n                                Stack().Width(40.percent()).Children(\r\n                                    SampleSubTitle(\"Do\"),\r\n                                    SampleDo(\"TODO\")),\r\n                                Stack().Width(40.percent()).Children(\r\n                                    SampleSubTitle(\"Don't\"),\r\n                                    SampleDont(\"TODO\")))))\r\n                        .Section(\r\n                            Stack().Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Basic TextBox\").Medium(),\r\n                                Stack().Width(40.percent()).Children(\r\n                                    Label(\"Non-empty\").SetContent(tb1),\r\n                                    Label(\"Integer > 0\").SetContent(tb2),\r\n                                    Label(\"Is all valid\").SetContent(isAllValid),\r\n                                    Label(\"Test revalidation (will fail if repeated)\").SetContent(Button(\"Revalidate\").OnClick((s,b) => validator.Revalidate())))));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return content.Render();\r\n        }\r\n    }\r\n}\r\n";
                case "VirtualizedListSample": return "using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Tesserae.Components;\r\nusing static Tesserae.Tests.Samples.SamplesHelper;\r\nusing static Tesserae.UI;\r\nusing static Retyped.dom;\r\n\r\nnamespace Tesserae.Tests.Samples\r\n{\r\n    public class VirtualizedListSample : IComponent\r\n    {\r\n        private readonly IComponent _content;\r\n\r\n        public VirtualizedListSample()\r\n        {\r\n            _content =\r\n                SectionStack()\r\n                    .Title(SampleHeader(nameof(VirtualizedListSample)))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Overview\"),\r\n                                TextBlock(\"List provides a base component for rendering large sets of items. \" +\r\n                                          \"It is agnostic of the tile component used, and selection \" +\r\n                                          \"management. These concerns can be layered separately.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"Performance is important, and DOM content is expensive. Therefore, \" +\r\n                                          \"limit what you render. List applies this principle by using UI \" +\r\n                                          \"virtualization. Unlike a simple for loop that renders all items in \" +\r\n                                          \"a set, a List only renders a subset of items, and as you scroll around, \" +\r\n                                          \"the subset of rendered content is shifted. This gives a much \" +\r\n                                          \"better experience for large sets, especially when the \" +\r\n                                          \"per-item components are complex/render-intensive/network-intensive.\")\r\n                                    .PaddingBottom(16.px()),\r\n                                TextBlock(\"List breaks down the set of items passed in into pages. Only pages \" +\r\n                                          \"within a 'materialized window' are actually rendered. As that window \" +\r\n                                          \"changes due to scroll events, pages that fall outside that window are \" +\r\n                                          \"removed, and their layout space is remembered and pushed into spacer \" +\r\n                                          \"elements. This gives the user the experience of browsing massive amounts \" +\r\n                                          \"of content but only using a small number of actual elements. \" +\r\n                                          \"This gives the browser much less layout to resolve.\")))\r\n                    .Section(\r\n                        Stack()\r\n                            .Children(\r\n                                SampleTitle(\"Usage\"),\r\n                                TextBlock(\"Virtualized List\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                VirtualizedList().WithListItems(GetALotOfItems()).PaddingBottom(32.px()),\r\n                                TextBlock(\"Virtualized List with Empty List Message\")\r\n                                    .Medium()\r\n                                    .PaddingBottom(16.px()),\r\n                                VirtualizedList().WithEmptyMessage(() => TextBlock(\"No List Items\")).WithListItems(Enumerable.Empty<IComponent>())));\r\n        }\r\n\r\n        public HTMLElement Render()\r\n        {\r\n            return _content.Render();\r\n        }\r\n\r\n        private IEnumerable<SampleVirtualizedItem> GetALotOfItems()\r\n        {\r\n            return Enumerable\r\n                .Range(1, 5000)\r\n                .Select(number => new SampleVirtualizedItem($\"Lorem Ipsum {number}\"));\r\n        }\r\n\r\n        public sealed class SampleVirtualizedItem : IComponent\r\n        {\r\n            private readonly HTMLElement _innerElement;\r\n\r\n            public SampleVirtualizedItem(string text)\r\n            {\r\n                _innerElement =\r\n                    Div(_(text: text, styles: s =>\r\n                    {\r\n                        s.display = \"block\";\r\n                        s.textAlign = \"center\";\r\n                        s.height = \"63px\";\r\n                    }));\r\n            }\r\n\r\n            public HTMLElement Render() => _innerElement;\r\n        }\r\n    }\r\n}\r\n";
                default: return "Missing sample code";
            }
        }
    }
}
